/// <reference types="node" />
/// <reference types=".pnpm/@solana+web3.js@1.66.2/node_modules/@solana/web3.js" />
import { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';
import { AccountInfo } from '@solana/spl-token';
import { BN } from '@project-serum/anchor';
import { VaultProgram } from '../types';
export declare const getAssociatedTokenAccount: (tokenMint: PublicKey, owner: PublicKey, allowOwnerOffCurve?: boolean) => Promise<PublicKey>;
export declare const deserializeAccount: (data: Buffer | undefined) => AccountInfo | undefined;
export declare const getOrCreateATAInstruction: (tokenMint: PublicKey, owner: PublicKey, connection: Connection, opt?: {
    payer?: PublicKey;
}) => Promise<[PublicKey, TransactionInstruction?]>;
export declare const getVaultPdas: (tokenMint: PublicKey, programId: PublicKey, seedBaseKey?: PublicKey) => {
    vaultPda: PublicKey;
    tokenVaultPda: PublicKey;
    lpMintPda: PublicKey;
};
export declare const wrapSOLInstruction: (from: PublicKey, to: PublicKey, amount: BN) => TransactionInstruction[];
export declare const unwrapSOLInstruction: (walletPublicKey: PublicKey) => Promise<TransactionInstruction | null>;
export declare const getOnchainTime: (connection: Connection) => Promise<number>;
export declare const getLpSupply: (connection: Connection, tokenMint: PublicKey) => Promise<BN>;
export declare function chunks<T>(array: T[], size: number): T[][];
export declare function chunkedFetchMultipleVaultAccount(program: VaultProgram, pks: PublicKey[], chunkSize?: number): Promise<Object[]>;
export declare function chunkedGetMultipleAccountInfos(connection: Connection, pks: PublicKey[], chunkSize?: number): Promise<(import("@solana/web3.js").AccountInfo<Buffer> | null)[]>;
//# sourceMappingURL=index.d.ts.map