var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Wallet } from '@project-serum/anchor';
import { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes';
import { Connection, Keypair } from '@solana/web3.js';
const LAMPORTS_PER_SOL = 1e9;
export const airDropSol = (connection, publicKey, amount = 1) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const airdropSignature = yield connection.requestAirdrop(publicKey, amount * LAMPORTS_PER_SOL);
        const latestBlockHash = yield connection.getLatestBlockhash();
        yield connection.confirmTransaction({
            blockhash: latestBlockHash.blockhash,
            lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,
            signature: airdropSignature,
        });
    }
    catch (error) {
        console.error(error);
        throw error;
    }
});
export const mockWallet = new Wallet(process.env.WALLET_PRIVATE_KEY ? Keypair.fromSecretKey(bs58.decode(process.env.WALLET_PRIVATE_KEY)) : new Keypair());
export const MAINNET = {
    connection: new Connection(process.env.MAINNET_RPC_ENDPOINT),
    cluster: 'mainnet-beta',
};
export const DEVNET = {
    connection: new Connection('https://api.devnet.solana.com/', {
        commitment: 'confirmed',
    }),
    cluster: 'devnet',
};
//# sourceMappingURL=index.js.map