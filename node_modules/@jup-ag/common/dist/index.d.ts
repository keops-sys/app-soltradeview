import { TransactionError } from '@mercurial-finance/optimist';
import { VersionedTransactionResponse, PublicKey, Signer, Keypair, TransactionSignature, BlockhashWithExpiryBlockHeight, Connection, Transaction, VersionedTransaction, ConfirmedTransactionMeta, Blockhash, TransactionInstruction, AddressLookupTableAccount, Cluster, FeeCalculator } from '@solana/web3.js';
import { SignerWalletAdapter } from '@solana/wallet-adapter-base';
import JSBI from 'jsbi';
import { Event, Program } from '@coral-xyz/anchor';

type JupiterV4 = {
    version: '0.1.0';
    name: 'jupiter';
    instructions: [
        {
            name: 'route';
            accounts: [
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'destinationTokenAccount';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [
                {
                    name: 'swapLeg';
                    type: {
                        defined: 'SwapLeg';
                    };
                },
                {
                    name: 'inAmount';
                    type: 'u64';
                },
                {
                    name: 'quotedOutAmount';
                    type: 'u64';
                },
                {
                    name: 'slippageBps';
                    type: 'u16';
                },
                {
                    name: 'platformFeeBps';
                    type: 'u8';
                }
            ];
        },
        {
            name: 'whirlpoolSwapExactOutput';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'whirlpool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenOwnerAccountA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenVaultA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenOwnerAccountB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenVaultB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray0';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray1';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray2';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'oracle';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [
                {
                    name: 'outAmount';
                    type: 'u64';
                },
                {
                    name: 'inAmountWithSlippage';
                    type: {
                        defined: 'AmountWithSlippage';
                    };
                },
                {
                    name: 'aToB';
                    type: 'bool';
                },
                {
                    name: 'platformFeeBps';
                    type: 'u8';
                }
            ];
        },
        {
            name: 'raydiumSwapExactOutput';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'ammId';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'ammAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'ammOpenOrders';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolCoinTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolPcTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumProgramId';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'serumMarket';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumBids';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumAsks';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumEventQueue';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumCoinVaultAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumPcVaultAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumVaultSigner';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userSourceTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userDestinationTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userSourceOwner';
                    isMut: false;
                    isSigner: true;
                }
            ];
            args: [
                {
                    name: 'outAmount';
                    type: 'u64';
                },
                {
                    name: 'inAmountWithSlippage';
                    type: {
                        defined: 'AmountWithSlippage';
                    };
                },
                {
                    name: 'platformFeeBps';
                    type: 'u8';
                }
            ];
        },
        {
            name: 'raydiumClmmSwapExactOutput';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'payer';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'ammConfig';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'observationState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tickArray';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [
                {
                    name: 'outAmount';
                    type: 'u64';
                },
                {
                    name: 'inAmountWithSlippage';
                    type: {
                        defined: 'AmountWithSlippage';
                    };
                },
                {
                    name: 'platformFeeBps';
                    type: 'u8';
                }
            ];
        },
        {
            name: 'createOpenOrders';
            accounts: [
                {
                    name: 'openOrders';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'payer';
                    isMut: true;
                    isSigner: true;
                },
                {
                    name: 'dexProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'rent';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'market';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'mercurialSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swapState';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'sourceTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destinationTokenAccount';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'cykuraSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'signer';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'factoryState';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'lastObservationState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'coreProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'serumSwap';
            accounts: [
                {
                    name: 'market';
                    accounts: [
                        {
                            name: 'market';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'openOrders';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'requestQueue';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'eventQueue';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'bids';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'asks';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'coinVault';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'pcVault';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'vaultSigner';
                            isMut: false;
                            isSigner: false;
                        }
                    ];
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'orderPayerTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'coinWallet';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'pcWallet';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'dexProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'rent';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'saberSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swap';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swapAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'inputUserAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputUserAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feesTokenAccount';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'saberAddDecimals';
            accounts: [
                {
                    name: 'addDecimalsProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'wrapper';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'wrapperMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'wrapperUnderlyingTokens';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'owner';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'userUnderlyingTokens';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userWrappedTokens';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'tokenSwap';
            accounts: [
                {
                    name: 'tokenSwapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swap';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'source';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSource';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolFee';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'senchaSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swap';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'inputUserAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputFeesAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputUserAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputFeesAccount';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'stepSwap';
            accounts: [
                {
                    name: 'tokenSwapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swap';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'source';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSource';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolFee';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'cropperSwap';
            accounts: [
                {
                    name: 'tokenSwapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swap';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swapState';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'source';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSource';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolFee';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'raydiumSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'ammId';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'ammAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'ammOpenOrders';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolCoinTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolPcTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumProgramId';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'serumMarket';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumBids';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumAsks';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumEventQueue';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumCoinVaultAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumPcVaultAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumVaultSigner';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userSourceTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userDestinationTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userSourceOwner';
                    isMut: false;
                    isSigner: true;
                }
            ];
            args: [];
        },
        {
            name: 'cremaSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'clmmConfig';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'clmmpool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenA';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenB';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'accountA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'accountB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenAVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenBVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArrayMap';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'owner';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'partner';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'partnerAtaA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'partnerAtaB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'lifinitySwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'amm';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'sourceInfo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destinationInfo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSource';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feeAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pythAccount';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pythPcAccount';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'configAccount';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'marinadeDeposit';
            accounts: [
                {
                    name: 'marinadeFinanceProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'state';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'msolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liqPoolSolLegPda';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liqPoolMsolLeg';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liqPoolMsolLegAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'reservePda';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'transferFrom';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'mintTo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'msolMintAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userWsolTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tempWsolTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: true;
                    isSigner: true;
                },
                {
                    name: 'wsolMint';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'rent';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'marinadeUnstake';
            accounts: [
                {
                    name: 'marinadeFinanceProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'state';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'msolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liqPoolSolLegPda';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liqPoolMsolLeg';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'treasuryMsolAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'getMsolFrom';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'getMsolFromAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'transferSolTo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userWsolTokenAccount';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'aldrinSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pool';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolSigner';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'baseTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'quoteTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feePoolTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'walletAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'userBaseTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userQuoteTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'aldrinV2Swap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pool';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolSigner';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'baseTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'quoteTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feePoolTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'walletAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'userBaseTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userQuoteTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'curve';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'whirlpoolSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'whirlpool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenOwnerAccountA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenVaultA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenOwnerAccountB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenVaultB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray0';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray1';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray2';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'oracle';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'invariantSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'state';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickmap';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'accountX';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'accountY';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'reserveX';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'reserveY';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'owner';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'programAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'meteoraSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userSourceToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userDestinationToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'aVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'aTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'aVaultLpMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bVaultLpMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'aVaultLp';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bVaultLp';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'adminTokenFee';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'user';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'vaultProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'goosefxSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'controller';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pair';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'sslIn';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'sslOut';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liabilityVaultIn';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swappedLiabilityVaultIn';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liabilityVaultOut';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swappedLiabilityVaultOut';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userInAta';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userOutAta';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feeCollectorAta';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userWallet';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'feeCollector';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'deltafiSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'marketConfig';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swapInfo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userSourceToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userDestinationToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSourceToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestinationToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'deltafiUser';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'adminDestinationToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'pythPriceBase';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pythPriceQuote';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'balansolSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: true;
                    isSigner: true;
                },
                {
                    name: 'pool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'taxMan';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bidMint';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'treasurer';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'srcTreasury';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'srcAssociatedTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'askMint';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'dstTreasury';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'dstAssociatedTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'dstTokenAccountTaxman';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'associatedTokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'rent';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'marcoPoloSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'state';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenX';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenY';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolXAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolYAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapperXAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapperYAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapper';
                    isMut: true;
                    isSigner: true;
                },
                {
                    name: 'referrerXAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'referrerYAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'referrer';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'programAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'associatedTokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'rent';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'dradexSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pair';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'market';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'eventQueue';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'dexUser';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'marketUser';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bids';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'asks';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 't0Vault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 't1Vault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 't0User';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 't1User';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'master';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'signer';
                    isMut: true;
                    isSigner: true;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'logger';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'lifinityV2Swap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'amm';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'sourceInfo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destinationInfo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSource';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feeAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'oracleMainAccount';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'oracleSubAccount';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'oraclePcAccount';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'raydiumClmmSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'payer';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'ammConfig';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'observationState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tickArray';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'phoenixSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'logAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'market';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'trader';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'baseAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'quoteAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'baseVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'quoteVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'symmetrySwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'buyer';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'fundState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'pdaAccount';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pdaFromTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'buyerFromTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'pdaToTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'buyerToTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapFeeAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'hostFeeAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'managerFeeAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenInfo';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'prismData';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        }
    ];
    types: [
        {
            name: 'AmountWithSlippage';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'amount';
                        type: 'u64';
                    },
                    {
                        name: 'slippageBps';
                        type: 'u16';
                    }
                ];
            };
        },
        {
            name: 'SplitLegDeeper';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'percent';
                        type: 'u8';
                    },
                    {
                        name: 'swapLeg';
                        type: {
                            defined: 'SwapLegSwap';
                        };
                    }
                ];
            };
        },
        {
            name: 'SplitLeg';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'percent';
                        type: 'u8';
                    },
                    {
                        name: 'swapLeg';
                        type: {
                            defined: 'SwapLegDeeper';
                        };
                    }
                ];
            };
        },
        {
            name: 'SwapInstrution';
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'Swap';
                        fields: [
                            {
                                defined: 'Swap';
                            }
                        ];
                    }
                ];
            };
        },
        {
            name: 'Side';
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'Bid';
                    },
                    {
                        name: 'Ask';
                    }
                ];
            };
        },
        {
            name: 'SwapLegSwap';
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'PlaceholderOne';
                    },
                    {
                        name: 'PlaceholderTwo';
                    },
                    {
                        name: 'Swap';
                        fields: [
                            {
                                name: 'swap';
                                type: {
                                    defined: 'Swap';
                                };
                            }
                        ];
                    }
                ];
            };
        },
        {
            name: 'SwapLegDeeper';
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'Chain';
                        fields: [
                            {
                                name: 'swap_legs';
                                type: {
                                    vec: {
                                        defined: 'SwapLegSwap';
                                    };
                                };
                            }
                        ];
                    },
                    {
                        name: 'Split';
                        fields: [
                            {
                                name: 'split_legs';
                                type: {
                                    vec: {
                                        defined: 'SplitLegDeeper';
                                    };
                                };
                            }
                        ];
                    },
                    {
                        name: 'Swap';
                        fields: [
                            {
                                name: 'swap';
                                type: {
                                    defined: 'Swap';
                                };
                            }
                        ];
                    }
                ];
            };
        },
        {
            name: 'SwapLeg';
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'Chain';
                        fields: [
                            {
                                name: 'swap_legs';
                                type: {
                                    vec: {
                                        defined: 'SwapLegDeeper';
                                    };
                                };
                            }
                        ];
                    },
                    {
                        name: 'Split';
                        fields: [
                            {
                                name: 'split_legs';
                                type: {
                                    vec: {
                                        defined: 'SplitLeg';
                                    };
                                };
                            }
                        ];
                    },
                    {
                        name: 'Swap';
                        fields: [
                            {
                                name: 'swap';
                                type: {
                                    defined: 'Swap';
                                };
                            }
                        ];
                    }
                ];
            };
        },
        {
            name: 'Swap';
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'Saber';
                    },
                    {
                        name: 'SaberAddDecimalsDeposit';
                    },
                    {
                        name: 'SaberAddDecimalsWithdraw';
                    },
                    {
                        name: 'TokenSwap';
                    },
                    {
                        name: 'Sencha';
                    },
                    {
                        name: 'Step';
                    },
                    {
                        name: 'Cropper';
                    },
                    {
                        name: 'Raydium';
                    },
                    {
                        name: 'Crema';
                        fields: [
                            {
                                name: 'a_to_b';
                                type: 'bool';
                            }
                        ];
                    },
                    {
                        name: 'Lifinity';
                    },
                    {
                        name: 'Mercurial';
                    },
                    {
                        name: 'Cykura';
                    },
                    {
                        name: 'Serum';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'MarinadeDeposit';
                    },
                    {
                        name: 'MarinadeUnstake';
                    },
                    {
                        name: 'Aldrin';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'AldrinV2';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'Whirlpool';
                        fields: [
                            {
                                name: 'a_to_b';
                                type: 'bool';
                            }
                        ];
                    },
                    {
                        name: 'Invariant';
                        fields: [
                            {
                                name: 'x_to_y';
                                type: 'bool';
                            }
                        ];
                    },
                    {
                        name: 'Meteora';
                    },
                    {
                        name: 'GooseFX';
                    },
                    {
                        name: 'DeltaFi';
                        fields: [
                            {
                                name: 'stable';
                                type: 'bool';
                            }
                        ];
                    },
                    {
                        name: 'Balansol';
                    },
                    {
                        name: 'MarcoPolo';
                        fields: [
                            {
                                name: 'x_to_y';
                                type: 'bool';
                            }
                        ];
                    },
                    {
                        name: 'Dradex';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'LifinityV2';
                    },
                    {
                        name: 'RaydiumClmm';
                    },
                    {
                        name: 'Openbook';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'Phoenix';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'Symmetry';
                        fields: [
                            {
                                name: 'fromTokenId';
                                type: 'u64';
                            },
                            {
                                name: 'toTokenId';
                                type: 'u64';
                            }
                        ];
                    }
                ];
            };
        },
        {
            name: 'SwapAction';
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'SetupSplit';
                        fields: [
                            {
                                name: 'percents';
                                type: 'bytes';
                            }
                        ];
                    },
                    {
                        name: 'NextSplitLeg';
                    },
                    {
                        name: 'MergeSplit';
                    },
                    {
                        name: 'Swap';
                        fields: [
                            {
                                name: 'swap';
                                type: {
                                    defined: 'Swap';
                                };
                            }
                        ];
                    }
                ];
            };
        }
    ];
    events: [
        {
            name: 'Swap';
            fields: [
                {
                    name: 'amm';
                    type: 'publicKey';
                    index: false;
                },
                {
                    name: 'inputMint';
                    type: 'publicKey';
                    index: false;
                },
                {
                    name: 'inputAmount';
                    type: 'u64';
                    index: false;
                },
                {
                    name: 'outputMint';
                    type: 'publicKey';
                    index: false;
                },
                {
                    name: 'outputAmount';
                    type: 'u64';
                    index: false;
                }
            ];
        },
        {
            name: 'Fee';
            fields: [
                {
                    name: 'account';
                    type: 'publicKey';
                    index: false;
                },
                {
                    name: 'mint';
                    type: 'publicKey';
                    index: false;
                },
                {
                    name: 'amount';
                    type: 'u64';
                    index: false;
                }
            ];
        }
    ];
    errors: [
        {
            code: 6000;
            name: 'EmptyRoute';
            msg: 'Empty route';
        },
        {
            code: 6001;
            name: 'SlippageToleranceExceeded';
            msg: 'Slippage tolerance exceeded';
        },
        {
            code: 6002;
            name: 'InvalidCalculation';
            msg: 'Invalid calculation';
        },
        {
            code: 6003;
            name: 'MissingPlatformFeeAccount';
            msg: 'Missing platform fee account';
        },
        {
            code: 6004;
            name: 'InvalidSlippage';
            msg: 'Invalid slippage';
        },
        {
            code: 6005;
            name: 'NotEnoughPercent';
            msg: 'Not enough percent to 100';
        },
        {
            code: 6006;
            name: 'InAmountsStackIsEmpty';
            msg: 'In amounts stack is empty';
        },
        {
            code: 6007;
            name: 'OutAmountsStackIsEmpty';
            msg: 'Out amounts stack is empty';
        },
        {
            code: 6008;
            name: 'NotEnoughAccountKeys';
            msg: 'Not Enough Account keys';
        }
    ];
};
declare const IDL_V4: JupiterV4;

declare function validateTransactionResponse({ txid, transactionResponse, }: {
    txid: string;
    transactionResponse: VersionedTransactionResponse | null;
}): VersionedTransactionResponse | TransactionError;

type _Owner = Keypair | PublicKey;
declare class Owner {
    private readonly _owner;
    constructor(owner: _Owner);
    get publicKey(): PublicKey;
    get signer(): Signer | undefined;
    get isKeyPair(): boolean;
    get isPublicKey(): boolean;
    static isKeyPair(owner: _Owner): owner is Keypair;
    static isPublicKey(owner: _Owner): owner is PublicKey;
}

type TokenMintAddress = string;
type PlatformFeeAndAccounts = {
    feeBps: number;
    feeAccounts: Map<string, PublicKey>;
};
type PlatformFee = {
    feeBps: number;
    feeAccount: PublicKey;
};
type QuoteMintToReferrer = Map<TokenMintAddress, PublicKey>;
interface Fee {
    amount: JSBI;
    mint: string;
    pct: number;
}
type SwapResult = {
    txid: string;
    inputAddress: PublicKey;
    outputAddress: PublicKey;
    inputAmount: number;
    outputAmount: number;
} | {
    error?: TransactionError;
};
declare enum SwapMode {
    ExactIn = "ExactIn",
    ExactOut = "ExactOut"
}
type OnTransaction = (txid: TransactionSignature, awaiter: Promise<VersionedTransactionResponse | TransactionError | null>) => void;
type ExecuteParams = {
    wallet?: Pick<SignerWalletAdapter, 'signAllTransactions' | 'signTransaction'>;
    /**
     * Allows to customize control of sending and awaiting confirmation in the single/multi transaction flow
     */
    onTransaction?: OnTransaction;
};
interface TransactionFeeInfo {
    signatureFee: number;
    openOrdersDeposits: number[];
    ataDeposits: number[];
    totalFeeAndDeposits: number;
    minimumSOLForTransaction: number;
}
interface ExchangeParams<T> {
    routeInfo: T;
    /**
     * This will overwrite the default Jupiter.setUser, useful for stateless usage like API
     */
    userPublicKey?: PublicKey;
    /**
     * This will overwrite the default fee account, useful for stateless usage like API
     */
    feeAccount?: PublicKey;
    /**
     * This will overwrite the default wrapUnwrapSOL, useful for stateless usage like API
     */
    wrapUnwrapSOL?: boolean;
    /**
     * The transaction will use the blockhash and valid blockheight to create transaction
     */
    blockhashWithExpiryBlockHeight?: BlockhashWithExpiryBlockHeight;
    /**
     * Produces a legacy transaction
     */
    asLegacyTransaction?: boolean;
    /**
     * compute unit price in micro lamports, the swap transaction will cost consumed compute units * computeUnitPriceMicroLamports, see https://docs.solana.com/developing/programming-model/runtime#prioritization-fees
     */
    computeUnitPriceMicroLamports?: number | 'auto';
}
type SetupInstructions = {
    openOrders: ((Instruction & {
        address: PublicKey;
    }) | undefined)[];
    intermediates: (Instruction & {
        address: PublicKey;
    })[];
    destination: Instruction & {
        address: PublicKey;
    };
};

/** sign, send and await confirmation for an exchange */
declare const executeTransaction: ({ connection, wallet, onTransaction, inputMint, outputMint, sourceAddress, destinationAddress, swapTransaction, owner, wrapUnwrapSOL, }: {
    connection: Connection;
    wallet: ExecuteParams['wallet'];
    onTransaction?: OnTransaction | undefined;
    inputMint: PublicKey;
    outputMint: PublicKey;
    sourceAddress: PublicKey;
    destinationAddress: PublicKey;
    swapTransaction: Transaction | VersionedTransaction;
    owner: Owner;
    wrapUnwrapSOL?: boolean | undefined;
}) => Promise<SwapResult>;

declare function getPlatformFeeAccounts(connection: Connection, feeAccountOwner: PublicKey): Promise<Map<string, PublicKey>>;

declare function extractTokenBalanceChangeFromTransaction(meta: ConfirmedTransactionMeta, keyMap: Map<string, number>, tokenAccountAddress: PublicKey): number | undefined;
/** Assumption: user is the signer so it can never be rolled */
declare function extractSOLChangeFromTransaction(meta: ConfirmedTransactionMeta, keyMap: Map<string, number>, user: PublicKey): number;
declare function extractInputTokenBalanceChange(events: Event[], mint: PublicKey): number;
declare function extractOutputTokenBalanceChange(events: Event[], mint: PublicKey): number;
declare function getTokenBalanceChangesFromTransactionResponse({ txid, inputMint, outputMint, user, sourceAddress, destinationAddress, transactionResponse, hasWrappedSOL, }: {
    txid: TransactionSignature;
    inputMint: PublicKey;
    outputMint: PublicKey;
    user: PublicKey;
    sourceAddress: PublicKey;
    destinationAddress: PublicKey;
    transactionResponse: VersionedTransactionResponse | null;
    hasWrappedSOL: boolean;
}): number[];
declare function getUnixTs(): number;
type TransactionSenderAndConfirmationWaiterArgs = {
    connection: Connection;
    signedTransaction: Transaction | VersionedTransaction;
    timeout?: number;
    pollInterval?: number;
    sendInterval?: number;
    sendRetries?: number;
};
/**
 * awaits confirmation while resending the transaction periodically
 *
 * Our RPC node settings
 * solana_send_leader_count: 8
 * solana_send_retry_ms: 15000
 **/
declare function transactionSenderAndConfirmationWaiter({ connection, signedTransaction, pollInterval, sendInterval, sendRetries, }: TransactionSenderAndConfirmationWaiterArgs): Promise<{
    txid: TransactionSignature;
    transactionResponse: VersionedTransactionResponse | null;
}>;
declare function getSignature(transaction: Transaction | VersionedTransaction): string;
declare function getTransactionBlockhashAndFeePayer(transaction: Transaction | VersionedTransaction): {
    blockhash: Blockhash;
    feePayer: PublicKey;
};
declare function signTransaction(transaction: Transaction | VersionedTransaction, signers: Signer[]): TransactionSignature;

declare const wait: (time: number) => Promise<void>;

interface IndexedRouteMap {
    mintKeys: string[];
    indexedRouteMap: {
        [key: number]: number[];
    };
}
/** An indexed route map which is light (less data to compress/decompress) and can quickly be inflated into the full route map  */
declare function routeMapToIndexedRouteMap(routeMap: Map<string, string[]>): {
    mintKeys: string[];
    indexedRouteMap: Record<number, number[]>;
};
declare function indexedRouteMapToRouteMap(indexedRouteMap: IndexedRouteMap): Map<string, string[]>;
declare function getRemoteRouteMap({ onlyDirectRoutes, restrictIntermediateTokens, asLegacyTransaction, }: {
    onlyDirectRoutes?: boolean;
    restrictIntermediateTokens?: boolean;
    asLegacyTransaction?: boolean;
}, indexedRouteMapUrl?: string): Promise<Map<string, string[]>>;

declare const getEmptyInstruction: () => Instruction;
type Instruction = {
    setupInstructions: TransactionInstruction[];
    instructions: TransactionInstruction[];
    cleanupInstructions: TransactionInstruction[];
    signers: Signer[];
};
type TransactionPayload = {
    transaction: Transaction | VersionedTransaction;
    signers: Signer[];
    execute: () => Promise<TransactionSignature>;
};

declare class TransactionBuilder {
    private connection;
    private feePayer;
    private instructions;
    private owner;
    constructor(connection: Connection, feePayer: PublicKey, owner: Owner);
    addInstruction(instruction: Instruction): TransactionBuilder;
    build(blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight, addressLookupTables: AddressLookupTableAccount[], asLegacyTransaction?: boolean): Promise<TransactionPayload>;
    private buildLegacyTransaction;
    private buildVersionedTransaction;
}

declare function createAndCloseWSOLAccount({ connection, amount, owner: { publicKey }, }: {
    connection: Connection;
    owner: Owner;
    amount: JSBI;
}): Promise<Instruction & {
    address: PublicKey;
}>;
declare function findOrCreateAssociatedAccountByMint({ connection, payer, owner: { publicKey }, mintAddress, unwrapSOL, }: {
    connection: Connection;
    payer: PublicKey;
    owner: Owner;
    mintAddress: PublicKey | string;
    unwrapSOL: boolean;
}): Promise<Instruction & {
    address: PublicKey;
}>;
declare function createAssociatedTokenAccountIdempotentInstruction(payer: PublicKey, associatedToken: PublicKey, owner: PublicKey, mint: PublicKey, programId?: PublicKey, associatedTokenProgramId?: PublicKey): TransactionInstruction;
declare const findAssociatedTokenAddress: ({ walletAddress, tokenMintAddress, }: {
    walletAddress: PublicKey;
    tokenMintAddress: PublicKey;
}) => PublicKey;

type JupiterV5 = {
    version: '0.1.0';
    name: 'jupiter';
    instructions: [
        {
            name: 'route';
            docs: ['route_plan Topologically sorted trade DAG'];
            accounts: [
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'destinationTokenAccount';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [
                {
                    name: 'routePlan';
                    type: {
                        vec: {
                            defined: 'RoutePlanStep';
                        };
                    };
                },
                {
                    name: 'inAmount';
                    type: 'u64';
                },
                {
                    name: 'quotedOutAmount';
                    type: 'u64';
                },
                {
                    name: 'slippageBps';
                    type: 'u16';
                },
                {
                    name: 'platformFeeBps';
                    type: 'u8';
                }
            ];
        },
        {
            name: 'whirlpoolSwapExactOutput';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'whirlpool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenOwnerAccountA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenVaultA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenOwnerAccountB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenVaultB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray0';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray1';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray2';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'oracle';
                    isMut: false;
                    isSigner: false;
                    docs: ['Oracle is currently unused and will be enabled on subsequent updates'];
                }
            ];
            args: [
                {
                    name: 'outAmount';
                    type: 'u64';
                },
                {
                    name: 'inAmountWithSlippage';
                    type: {
                        defined: 'AmountWithSlippage';
                    };
                },
                {
                    name: 'aToB';
                    type: 'bool';
                },
                {
                    name: 'platformFeeBps';
                    type: 'u8';
                }
            ];
        },
        {
            name: 'raydiumSwapExactOutput';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'ammId';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'ammAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'ammOpenOrders';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolCoinTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolPcTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumProgramId';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'serumMarket';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumBids';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumAsks';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumEventQueue';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumCoinVaultAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumPcVaultAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumVaultSigner';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userSourceTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userDestinationTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userSourceOwner';
                    isMut: false;
                    isSigner: true;
                }
            ];
            args: [
                {
                    name: 'outAmount';
                    type: 'u64';
                },
                {
                    name: 'inAmountWithSlippage';
                    type: {
                        defined: 'AmountWithSlippage';
                    };
                },
                {
                    name: 'platformFeeBps';
                    type: 'u8';
                }
            ];
        },
        {
            name: 'raydiumClmmSwapExactOutput';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'payer';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'ammConfig';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'observationState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tickArray';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [
                {
                    name: 'outAmount';
                    type: 'u64';
                },
                {
                    name: 'inAmountWithSlippage';
                    type: {
                        defined: 'AmountWithSlippage';
                    };
                },
                {
                    name: 'platformFeeBps';
                    type: 'u8';
                }
            ];
        },
        {
            name: 'createOpenOrders';
            accounts: [
                {
                    name: 'openOrders';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'payer';
                    isMut: true;
                    isSigner: true;
                },
                {
                    name: 'dexProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'rent';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'market';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'mercurialSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swapState';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'sourceTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destinationTokenAccount';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'cykuraSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'signer';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'factoryState';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'lastObservationState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'coreProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'serumSwap';
            accounts: [
                {
                    name: 'market';
                    accounts: [
                        {
                            name: 'market';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'openOrders';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'requestQueue';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'eventQueue';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'bids';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'asks';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'coinVault';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'pcVault';
                            isMut: true;
                            isSigner: false;
                        },
                        {
                            name: 'vaultSigner';
                            isMut: false;
                            isSigner: false;
                        }
                    ];
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'orderPayerTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'coinWallet';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'pcWallet';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'dexProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'rent';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'saberSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swap';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swapAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'inputUserAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputUserAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feesTokenAccount';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'saberAddDecimals';
            accounts: [
                {
                    name: 'addDecimalsProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'wrapper';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'wrapperMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'wrapperUnderlyingTokens';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'owner';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'userUnderlyingTokens';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userWrappedTokens';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'tokenSwap';
            accounts: [
                {
                    name: 'tokenSwapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swap';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'source';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSource';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolFee';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'senchaSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swap';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'inputUserAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputFeesAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputUserAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputFeesAccount';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'stepSwap';
            accounts: [
                {
                    name: 'tokenSwapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swap';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'source';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSource';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolFee';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'cropperSwap';
            accounts: [
                {
                    name: 'tokenSwapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swap';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swapState';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'source';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSource';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolFee';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'raydiumSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'ammId';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'ammAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'ammOpenOrders';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolCoinTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolPcTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumProgramId';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'serumMarket';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumBids';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumAsks';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumEventQueue';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumCoinVaultAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumPcVaultAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'serumVaultSigner';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userSourceTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userDestinationTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userSourceOwner';
                    isMut: false;
                    isSigner: true;
                }
            ];
            args: [];
        },
        {
            name: 'cremaSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'clmmConfig';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'clmmpool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenA';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenB';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'accountA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'accountB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenAVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenBVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArrayMap';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'owner';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'partner';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'partnerAtaA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'partnerAtaB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'lifinitySwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'amm';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'sourceInfo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destinationInfo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSource';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feeAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pythAccount';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pythPcAccount';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'configAccount';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'marinadeDeposit';
            accounts: [
                {
                    name: 'marinadeFinanceProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'state';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'msolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liqPoolSolLegPda';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liqPoolMsolLeg';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liqPoolMsolLegAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'reservePda';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'transferFrom';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'mintTo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'msolMintAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userWsolTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tempWsolTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: true;
                    isSigner: true;
                },
                {
                    name: 'wsolMint';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'rent';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'marinadeUnstake';
            accounts: [
                {
                    name: 'marinadeFinanceProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'state';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'msolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liqPoolSolLegPda';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liqPoolMsolLeg';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'treasuryMsolAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'getMsolFrom';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'getMsolFromAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'transferSolTo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userWsolTokenAccount';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'aldrinSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pool';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolSigner';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'baseTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'quoteTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feePoolTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'walletAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'userBaseTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userQuoteTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'aldrinV2Swap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pool';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolSigner';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'baseTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'quoteTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feePoolTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'walletAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'userBaseTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userQuoteTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'curve';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'whirlpoolSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'whirlpool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenOwnerAccountA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenVaultA';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenOwnerAccountB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenVaultB';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray0';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray1';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickArray2';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'oracle';
                    isMut: false;
                    isSigner: false;
                    docs: ['Oracle is currently unused and will be enabled on subsequent updates'];
                }
            ];
            args: [];
        },
        {
            name: 'invariantSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'state';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tickmap';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'accountX';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'accountY';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'reserveX';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'reserveY';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'owner';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'programAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'meteoraSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userSourceToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userDestinationToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'aVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'aTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bTokenVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'aVaultLpMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bVaultLpMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'aVaultLp';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bVaultLp';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'adminTokenFee';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'user';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'vaultProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'goosefxSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'controller';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pair';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'sslIn';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'sslOut';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liabilityVaultIn';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swappedLiabilityVaultIn';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'liabilityVaultOut';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swappedLiabilityVaultOut';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userInAta';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userOutAta';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feeCollectorAta';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userWallet';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'feeCollector';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'deltafiSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'marketConfig';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'swapInfo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userSourceToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userDestinationToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSourceToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestinationToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'deltafiUser';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'adminDestinationToken';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'pythPriceBase';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pythPriceQuote';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'userAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'balansolSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: true;
                    isSigner: true;
                },
                {
                    name: 'pool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'taxMan';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bidMint';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'treasurer';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'srcTreasury';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'srcAssociatedTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'askMint';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'dstTreasury';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'dstAssociatedTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'dstTokenAccountTaxman';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'associatedTokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'rent';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'marcoPoloSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'state';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pool';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenX';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenY';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolXAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolYAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapperXAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapperYAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapper';
                    isMut: true;
                    isSigner: true;
                },
                {
                    name: 'referrerXAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'referrerYAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'referrer';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'programAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'associatedTokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'rent';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'dradexSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pair';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'market';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'eventQueue';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'dexUser';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'marketUser';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'bids';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'asks';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 't0Vault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 't1Vault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 't0User';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 't1User';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'master';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'signer';
                    isMut: true;
                    isSigner: true;
                },
                {
                    name: 'systemProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'logger';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'lifinityV2Swap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'authority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'amm';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'userTransferAuthority';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'sourceInfo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'destinationInfo';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapSource';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapDestination';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'poolMint';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'feeAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'oracleMainAccount';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'oracleSubAccount';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'oraclePcAccount';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'raydiumClmmSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'payer';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'ammConfig';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'poolState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'inputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'outputVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'observationState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tickArray';
                    isMut: true;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'phoenixSwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'logAuthority';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'market';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'trader';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'baseAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'quoteAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'baseVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'quoteVault';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        },
        {
            name: 'symmetrySwap';
            accounts: [
                {
                    name: 'swapProgram';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'buyer';
                    isMut: false;
                    isSigner: true;
                },
                {
                    name: 'fundState';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'pdaAccount';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'pdaFromTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'buyerFromTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'pdaToTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'buyerToTokenAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'swapFeeAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'hostFeeAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'managerFeeAccount';
                    isMut: true;
                    isSigner: false;
                },
                {
                    name: 'tokenInfo';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'prismData';
                    isMut: false;
                    isSigner: false;
                },
                {
                    name: 'tokenProgram';
                    isMut: false;
                    isSigner: false;
                }
            ];
            args: [];
        }
    ];
    types: [
        {
            name: 'AmountWithSlippage';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'amount';
                        type: 'u64';
                    },
                    {
                        name: 'slippageBps';
                        type: 'u16';
                    }
                ];
            };
        },
        {
            name: 'RoutePlanStep';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'swap';
                        type: {
                            defined: 'Swap';
                        };
                    },
                    {
                        name: 'percent';
                        type: 'u8';
                    },
                    {
                        name: 'inputIndex';
                        type: 'u8';
                    },
                    {
                        name: 'outputIndex';
                        type: 'u8';
                    }
                ];
            };
        },
        {
            name: 'Side';
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'Bid';
                    },
                    {
                        name: 'Ask';
                    }
                ];
            };
        },
        {
            name: 'Swap';
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'Saber';
                    },
                    {
                        name: 'SaberAddDecimalsDeposit';
                    },
                    {
                        name: 'SaberAddDecimalsWithdraw';
                    },
                    {
                        name: 'TokenSwap';
                    },
                    {
                        name: 'Sencha';
                    },
                    {
                        name: 'Step';
                    },
                    {
                        name: 'Cropper';
                    },
                    {
                        name: 'Raydium';
                    },
                    {
                        name: 'Crema';
                        fields: [
                            {
                                name: 'a_to_b';
                                type: 'bool';
                            }
                        ];
                    },
                    {
                        name: 'Lifinity';
                    },
                    {
                        name: 'Mercurial';
                    },
                    {
                        name: 'Cykura';
                    },
                    {
                        name: 'Serum';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'MarinadeDeposit';
                    },
                    {
                        name: 'MarinadeUnstake';
                    },
                    {
                        name: 'Aldrin';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'AldrinV2';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'Whirlpool';
                        fields: [
                            {
                                name: 'a_to_b';
                                type: 'bool';
                            }
                        ];
                    },
                    {
                        name: 'Invariant';
                        fields: [
                            {
                                name: 'x_to_y';
                                type: 'bool';
                            }
                        ];
                    },
                    {
                        name: 'Meteora';
                    },
                    {
                        name: 'GooseFX';
                    },
                    {
                        name: 'DeltaFi';
                        fields: [
                            {
                                name: 'stable';
                                type: 'bool';
                            }
                        ];
                    },
                    {
                        name: 'Balansol';
                    },
                    {
                        name: 'MarcoPolo';
                        fields: [
                            {
                                name: 'x_to_y';
                                type: 'bool';
                            }
                        ];
                    },
                    {
                        name: 'Dradex';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'LifinityV2';
                    },
                    {
                        name: 'RaydiumClmm';
                    },
                    {
                        name: 'Openbook';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'Phoenix';
                        fields: [
                            {
                                name: 'side';
                                type: {
                                    defined: 'Side';
                                };
                            }
                        ];
                    },
                    {
                        name: 'Symmetry';
                        fields: [
                            {
                                name: 'from_token_id';
                                type: 'u64';
                            },
                            {
                                name: 'to_token_id';
                                type: 'u64';
                            }
                        ];
                    }
                ];
            };
        }
    ];
    events: [
        {
            name: 'SwapEvent';
            fields: [
                {
                    name: 'amm';
                    type: 'publicKey';
                    index: false;
                },
                {
                    name: 'inputMint';
                    type: 'publicKey';
                    index: false;
                },
                {
                    name: 'inputAmount';
                    type: 'u64';
                    index: false;
                },
                {
                    name: 'outputMint';
                    type: 'publicKey';
                    index: false;
                },
                {
                    name: 'outputAmount';
                    type: 'u64';
                    index: false;
                }
            ];
        },
        {
            name: 'FeeEvent';
            fields: [
                {
                    name: 'account';
                    type: 'publicKey';
                    index: false;
                },
                {
                    name: 'mint';
                    type: 'publicKey';
                    index: false;
                },
                {
                    name: 'amount';
                    type: 'u64';
                    index: false;
                }
            ];
        }
    ];
    errors: [
        {
            code: 6000;
            name: 'EmptyRoute';
            msg: 'Empty route';
        },
        {
            code: 6001;
            name: 'SlippageToleranceExceeded';
            msg: 'Slippage tolerance exceeded';
        },
        {
            code: 6002;
            name: 'InvalidCalculation';
            msg: 'Invalid calculation';
        },
        {
            code: 6003;
            name: 'MissingPlatformFeeAccount';
            msg: 'Missing platform fee account';
        },
        {
            code: 6004;
            name: 'InvalidSlippage';
            msg: 'Invalid slippage';
        },
        {
            code: 6005;
            name: 'NotEnoughPercent';
            msg: 'Not enough percent to 100';
        },
        {
            code: 6006;
            name: 'InvalidInputIndex';
            msg: 'Token input index is invalid';
        },
        {
            code: 6007;
            name: 'InvalidOutputIndex';
            msg: 'Token output index is invalid';
        },
        {
            code: 6008;
            name: 'NotEnoughAccountKeys';
            msg: 'Not Enough Account keys';
        },
        {
            code: 6009;
            name: 'NonZeroMinimumOutAmountNotSupported';
            msg: 'Non zero minimum out amount not supported';
        },
        {
            code: 6010;
            name: 'InvalidRoutePlan';
            msg: 'Invalid route plan';
        }
    ];
};
declare const IDL_V5: JupiterV5;

declare const JUPITER_PROGRAM_V4_ID: PublicKey;
declare const JUPITER_PROGRAM_V5_ID: PublicKey;
declare const JUPITER_PROGRAM_V5_1_ID: PublicKey;
declare const JUPITER_PROGRAM_ID_DEVNET: PublicKey;
declare const JUPITER_PROGRAM_ID_STAGING: PublicKey;
declare const JUPITER_PROGRAM_ID_PRODUCTION: PublicKey;
declare const JUPITER_PROGRAM_ID: PublicKey;
declare const JUPITER_PROGRAM: Program<JupiterV4>;
declare const MAINNET_SERUM_DEX_PROGRAM: PublicKey;
declare const DEVNET_SERUM_DEX_PROGRAM: PublicKey;
declare const RAYDIUM_AMM_V4_PROGRAM_ID: PublicKey;
declare const ALDRIN_SWAP_PROGRAM_ID: PublicKey;
declare const ALDRIN_SWAP_V2_PROGRAM_ID: PublicKey;
declare const SABER_ADD_DECIMALS_PROGRAM_ID: PublicKey;
declare const CROPPER_PROGRAM_ID: PublicKey;
declare const SENCHA_PROGRAM_ID: PublicKey;
declare const LIFINITY_PROGRAM_ID: PublicKey;
declare const CREMA_PROGRAM_ID: PublicKey;
declare const CREMA_PARTNER_ACCOUNT: PublicKey;
declare const MERCURIAL_SWAP_PROGRAM_ID: PublicKey;
declare const WHIRLPOOL_PROGRAM_ID: PublicKey;
declare const INVARIANT_PROGRAM_ID: PublicKey;
declare const INVARIANT_STATE_ID: PublicKey;
declare const INVARIANT_PROGRAM_AUTHORITY_ID: PublicKey;
declare const CYKURA_PROGRAM_ID: PublicKey;
declare const CYKURA_FACTORY_STATE_ADDRESS: PublicKey;
declare const MARINADE_PROGRAM_ID: PublicKey;
declare const STEPN_PROGRAM_ID: PublicKey;
declare const ORCA_V1_PROGRAM_ID: PublicKey;
declare const ORCA_V2_PROGRAM_ID: PublicKey;
declare const STEP_TOKEN_SWAP_PROGRAM_ID: PublicKey;
declare const PENGUIN_PROGRAM_ID: PublicKey;
declare const SAROS_PROGRAM_ID: PublicKey;
declare const METEORA_PROGRAM_ID: PublicKey;
declare const METEORA_VAULT_PROGRAM_ID: PublicKey;
declare const DELTA_FI_PROGRAM_ID: PublicKey;
declare const DELTA_FI_USER_ID: PublicKey;
declare const GOOSE_FX_PROGRAM_ID: PublicKey;
declare const GOOSE_FX_CONTROLLER_ID: PublicKey;
declare const BALANSOL_PROGRAM_ID: PublicKey;
declare const DRADEX_PROGRAM_ID: PublicKey;
declare const DRADEX_LOGGER_PROGRAM_ID: PublicKey;
declare const DRADEX_MASTER_ID: PublicKey;
declare const LIFINITY_V2_PROGRAM_ID: PublicKey;
declare const DRADEX_DEX_USER: PublicKey;
declare const RAYDIUM_CLMM_PROGRAM_ID: PublicKey;
declare const OPENBOOK_PROGRAM_ID: PublicKey;
declare const MARCO_POLO_PROGRAM_ID: PublicKey;
declare const MARCO_POLO_STATE_ID: PublicKey;
declare const MARCO_POLO_PROGRAM_AUTHORITY: PublicKey;
declare const BONK_SWAP_PROGRAM_ID: PublicKey;
declare const BONK_SWAP_STATE_ID: PublicKey;
declare const BONK_SWAP_PROGRAM_AUTHORITY: PublicKey;
declare const PHOENIX_PROGRAM_ID: PublicKey;
declare const SYMMETRY_PROGRAM_ID: PublicKey;
declare const WRAPPED_SOL_MINT: PublicKey;
declare const MARKETS_URL: Record<Cluster, string>;
declare const INDEXED_ROUTE_MAP_URL = "https://cache.jup.ag/indexed-route-maps-v3";
declare const TOKEN_LIST_URL: Record<Cluster, string>;
declare const LAMPORTS_PER_SIGNATURE = 5000;
declare const JUPITER_FEE_OWNER: PublicKey;
interface ErrorDetails {
    code: number;
    name: string;
    msg: string;
}
type JUPITER_V5_ERROR_TYPES = COMMON_ERRORS | (typeof IDL_V5.errors)[number]['name'];
type COMMON_ERRORS = 'TransactionNotConfirmed' | 'BalancesNotExtractedProperly' | 'InsufficientSOL';
declare const COMMON_ERRORS: {
    AlreadyInUse: {
        code: number;
        name: string;
        msg: string;
    };
    InsufficientSOL: {
        code: number;
        name: string;
        msg: string;
    };
    TransactionNotConfirmed: {
        code: number;
        name: string;
        msg: string;
    };
    BalancesNotExtractedProperly: {
        code: number;
        name: string;
        msg: string;
    };
};
declare const JUPITER_V5_ERRORS: Record<JUPITER_V5_ERROR_TYPES, ErrorDetails>;

declare function createOpenOrdersInstruction(serumMarket: PublicKey, serumProgramId: PublicKey, userTransferAuthority: PublicKey): [PublicKey, TransactionInstruction];
declare function getOrCreateOpenOrdersAddress(connection: Connection, user: PublicKey, serumMarket: PublicKey, serumProgramId: PublicKey): Promise<(Instruction & {
    address: PublicKey;
}) | undefined>;
declare function getAtaInstructions({ connection, outputMints, owner, unwrapSOL, }: {
    connection: Connection;
    outputMints: PublicKey[];
    owner: Owner;
    unwrapSOL: boolean;
}): Promise<{
    userIntermediaryTokenAccountResults: (Instruction & {
        address: PublicKey;
    })[];
    userDestinationTokenAccountResult: Instruction & {
        address: PublicKey;
    };
}>;

declare const calculateTransactionDepositAndFee: ({ intermediates, destination, openOrders, hasWrapUnwrapSOL, feeCalculator, }: SetupInstructions & {
    hasWrapUnwrapSOL: boolean;
    feeCalculator: FeeCalculator;
}) => TransactionFeeInfo;
interface CalculateTransactionFeeAndDepositParams {
    numOfAtasToBeCreated: number;
    numOfOpenOrdersToBeCreated: number;
}
declare const calculateTransactionDepositAndFeeV2: ({ numOfAtasToBeCreated, numOfOpenOrdersToBeCreated, }: CalculateTransactionFeeAndDepositParams) => TransactionFeeInfo;

export { ALDRIN_SWAP_PROGRAM_ID, ALDRIN_SWAP_V2_PROGRAM_ID, BALANSOL_PROGRAM_ID, BONK_SWAP_PROGRAM_AUTHORITY, BONK_SWAP_PROGRAM_ID, BONK_SWAP_STATE_ID, COMMON_ERRORS, CREMA_PARTNER_ACCOUNT, CREMA_PROGRAM_ID, CROPPER_PROGRAM_ID, CYKURA_FACTORY_STATE_ADDRESS, CYKURA_PROGRAM_ID, DELTA_FI_PROGRAM_ID, DELTA_FI_USER_ID, DEVNET_SERUM_DEX_PROGRAM, DRADEX_DEX_USER, DRADEX_LOGGER_PROGRAM_ID, DRADEX_MASTER_ID, DRADEX_PROGRAM_ID, ErrorDetails, ExchangeParams, ExecuteParams, Fee, GOOSE_FX_CONTROLLER_ID, GOOSE_FX_PROGRAM_ID, IDL_V4, INDEXED_ROUTE_MAP_URL, INVARIANT_PROGRAM_AUTHORITY_ID, INVARIANT_PROGRAM_ID, INVARIANT_STATE_ID, IndexedRouteMap, Instruction, JUPITER_FEE_OWNER, JUPITER_PROGRAM, JUPITER_PROGRAM_ID, JUPITER_PROGRAM_ID_DEVNET, JUPITER_PROGRAM_ID_PRODUCTION, JUPITER_PROGRAM_ID_STAGING, JUPITER_PROGRAM_V4_ID, JUPITER_PROGRAM_V5_1_ID, JUPITER_PROGRAM_V5_ID, JUPITER_V5_ERRORS, JupiterV4, LAMPORTS_PER_SIGNATURE, LIFINITY_PROGRAM_ID, LIFINITY_V2_PROGRAM_ID, MAINNET_SERUM_DEX_PROGRAM, MARCO_POLO_PROGRAM_AUTHORITY, MARCO_POLO_PROGRAM_ID, MARCO_POLO_STATE_ID, MARINADE_PROGRAM_ID, MARKETS_URL, MERCURIAL_SWAP_PROGRAM_ID, METEORA_PROGRAM_ID, METEORA_VAULT_PROGRAM_ID, OPENBOOK_PROGRAM_ID, ORCA_V1_PROGRAM_ID, ORCA_V2_PROGRAM_ID, OnTransaction, Owner, PENGUIN_PROGRAM_ID, PHOENIX_PROGRAM_ID, PlatformFee, PlatformFeeAndAccounts, QuoteMintToReferrer, RAYDIUM_AMM_V4_PROGRAM_ID, RAYDIUM_CLMM_PROGRAM_ID, SABER_ADD_DECIMALS_PROGRAM_ID, SAROS_PROGRAM_ID, SENCHA_PROGRAM_ID, STEPN_PROGRAM_ID, STEP_TOKEN_SWAP_PROGRAM_ID, SYMMETRY_PROGRAM_ID, SetupInstructions, SwapMode, SwapResult, TOKEN_LIST_URL, TokenMintAddress, TransactionBuilder, TransactionFeeInfo, TransactionPayload, WHIRLPOOL_PROGRAM_ID, WRAPPED_SOL_MINT, calculateTransactionDepositAndFee, calculateTransactionDepositAndFeeV2, createAndCloseWSOLAccount, createAssociatedTokenAccountIdempotentInstruction, createOpenOrdersInstruction, executeTransaction, extractInputTokenBalanceChange, extractOutputTokenBalanceChange, extractSOLChangeFromTransaction, extractTokenBalanceChangeFromTransaction, findAssociatedTokenAddress, findOrCreateAssociatedAccountByMint, getAtaInstructions, getEmptyInstruction, getOrCreateOpenOrdersAddress, getPlatformFeeAccounts, getRemoteRouteMap, getSignature, getTokenBalanceChangesFromTransactionResponse, getTransactionBlockhashAndFeePayer, getUnixTs, indexedRouteMapToRouteMap, routeMapToIndexedRouteMap, signTransaction, transactionSenderAndConfirmationWaiter, validateTransactionResponse, wait };
