// src/idl/jupiter4.ts
var IDL_V4 = {
  version: "0.1.0",
  name: "jupiter",
  instructions: [
    {
      name: "route",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "destinationTokenAccount",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "swapLeg",
          type: {
            defined: "SwapLeg"
          }
        },
        {
          name: "inAmount",
          type: "u64"
        },
        {
          name: "quotedOutAmount",
          type: "u64"
        },
        {
          name: "slippageBps",
          type: "u16"
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "whirlpoolSwapExactOutput",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "whirlpool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray0",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray1",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray2",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "outAmount",
          type: "u64"
        },
        {
          name: "inAmountWithSlippage",
          type: {
            defined: "AmountWithSlippage"
          }
        },
        {
          name: "aToB",
          type: "bool"
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "raydiumSwapExactOutput",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammId",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgramId",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "userSourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceOwner",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "outAmount",
          type: "u64"
        },
        {
          name: "inAmountWithSlippage",
          type: {
            defined: "AmountWithSlippage"
          }
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "raydiumClmmSwapExactOutput",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "ammConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolState",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "observationState",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tickArray",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "outAmount",
          type: "u64"
        },
        {
          name: "inAmountWithSlippage",
          type: {
            defined: "AmountWithSlippage"
          }
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "createOpenOrders",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "dexProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "market",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "mercurialSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapState",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationTokenAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "cykuraSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "factoryState",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolState",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "lastObservationState",
          isMut: true,
          isSigner: false
        },
        {
          name: "coreProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "serumSwap",
      accounts: [
        {
          name: "market",
          accounts: [
            {
              name: "market",
              isMut: true,
              isSigner: false
            },
            {
              name: "openOrders",
              isMut: true,
              isSigner: false
            },
            {
              name: "requestQueue",
              isMut: true,
              isSigner: false
            },
            {
              name: "eventQueue",
              isMut: true,
              isSigner: false
            },
            {
              name: "bids",
              isMut: true,
              isSigner: false
            },
            {
              name: "asks",
              isMut: true,
              isSigner: false
            },
            {
              name: "coinVault",
              isMut: true,
              isSigner: false
            },
            {
              name: "pcVault",
              isMut: true,
              isSigner: false
            },
            {
              name: "vaultSigner",
              isMut: false,
              isSigner: false
            }
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "orderPayerTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "coinWallet",
          isMut: true,
          isSigner: false
        },
        {
          name: "pcWallet",
          isMut: true,
          isSigner: false
        },
        {
          name: "dexProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "saberSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "inputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "feesTokenAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "saberAddDecimals",
      accounts: [
        {
          name: "addDecimalsProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "wrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "wrapperMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "wrapperUnderlyingTokens",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "userUnderlyingTokens",
          isMut: true,
          isSigner: false
        },
        {
          name: "userWrappedTokens",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "tokenSwap",
      accounts: [
        {
          name: "tokenSwapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolFee",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "senchaSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: true,
          isSigner: false
        },
        {
          name: "userAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "inputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputFeesAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputFeesAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "stepSwap",
      accounts: [
        {
          name: "tokenSwapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolFee",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "cropperSwap",
      accounts: [
        {
          name: "tokenSwapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapState",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolFee",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "raydiumSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammId",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgramId",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "userSourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceOwner",
          isMut: false,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "cremaSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "clmmConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "clmmpool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenA",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenB",
          isMut: false,
          isSigner: false
        },
        {
          name: "accountA",
          isMut: true,
          isSigner: false
        },
        {
          name: "accountB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenAVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenBVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArrayMap",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "partner",
          isMut: false,
          isSigner: false
        },
        {
          name: "partnerAtaA",
          isMut: true,
          isSigner: false
        },
        {
          name: "partnerAtaB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "lifinitySwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pythAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "pythPcAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "configAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "marinadeDeposit",
      accounts: [
        {
          name: "marinadeFinanceProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "msolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolSolLegPda",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolMsolLeg",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolMsolLegAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "reservePda",
          isMut: true,
          isSigner: false
        },
        {
          name: "transferFrom",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintTo",
          isMut: true,
          isSigner: false
        },
        {
          name: "msolMintAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "userWsolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tempWsolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: true,
          isSigner: true
        },
        {
          name: "wsolMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "marinadeUnstake",
      accounts: [
        {
          name: "marinadeFinanceProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "msolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolSolLegPda",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolMsolLeg",
          isMut: true,
          isSigner: false
        },
        {
          name: "treasuryMsolAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "getMsolFrom",
          isMut: true,
          isSigner: false
        },
        {
          name: "getMsolFromAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "transferSolTo",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "userWsolTokenAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "aldrinSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "feePoolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "walletAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "userBaseTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "aldrinV2Swap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "feePoolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "walletAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "userBaseTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "curve",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "whirlpoolSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "whirlpool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray0",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray1",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray2",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "invariantSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickmap",
          isMut: true,
          isSigner: false
        },
        {
          name: "accountX",
          isMut: true,
          isSigner: false
        },
        {
          name: "accountY",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveX",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveY",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "meteoraSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminTokenFee",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "goosefxSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "controller",
          isMut: false,
          isSigner: false
        },
        {
          name: "pair",
          isMut: true,
          isSigner: false
        },
        {
          name: "sslIn",
          isMut: true,
          isSigner: false
        },
        {
          name: "sslOut",
          isMut: true,
          isSigner: false
        },
        {
          name: "liabilityVaultIn",
          isMut: true,
          isSigner: false
        },
        {
          name: "swappedLiabilityVaultIn",
          isMut: true,
          isSigner: false
        },
        {
          name: "liabilityVaultOut",
          isMut: true,
          isSigner: false
        },
        {
          name: "swappedLiabilityVaultOut",
          isMut: true,
          isSigner: false
        },
        {
          name: "userInAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userOutAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeCollectorAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userWallet",
          isMut: false,
          isSigner: true
        },
        {
          name: "feeCollector",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "deltafiSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "marketConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "deltafiUser",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "pythPriceBase",
          isMut: false,
          isSigner: false
        },
        {
          name: "pythPriceQuote",
          isMut: false,
          isSigner: false
        },
        {
          name: "userAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "balansolSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "taxMan",
          isMut: true,
          isSigner: false
        },
        {
          name: "bidMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "treasurer",
          isMut: false,
          isSigner: false
        },
        {
          name: "srcTreasury",
          isMut: true,
          isSigner: false
        },
        {
          name: "srcAssociatedTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "askMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "dstTreasury",
          isMut: true,
          isSigner: false
        },
        {
          name: "dstAssociatedTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "dstTokenAccountTaxman",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "marcoPoloSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapperXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapperYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapper",
          isMut: true,
          isSigner: true
        },
        {
          name: "referrerXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referrerYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referrer",
          isMut: true,
          isSigner: false
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "dradexSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pair",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "dexUser",
          isMut: false,
          isSigner: false
        },
        {
          name: "marketUser",
          isMut: true,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "t0Vault",
          isMut: true,
          isSigner: false
        },
        {
          name: "t1Vault",
          isMut: true,
          isSigner: false
        },
        {
          name: "t0User",
          isMut: true,
          isSigner: false
        },
        {
          name: "t1User",
          isMut: true,
          isSigner: false
        },
        {
          name: "master",
          isMut: false,
          isSigner: false
        },
        {
          name: "signer",
          isMut: true,
          isSigner: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "logger",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "lifinityV2Swap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "oracleMainAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "oracleSubAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "oraclePcAccount",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "raydiumClmmSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "ammConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolState",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "observationState",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tickArray",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "phoenixSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "symmetrySwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "buyer",
          isMut: false,
          isSigner: true
        },
        {
          name: "fundState",
          isMut: true,
          isSigner: false
        },
        {
          name: "pdaAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "pdaFromTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "buyerFromTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "pdaToTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "buyerToTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapFeeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "hostFeeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "managerFeeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenInfo",
          isMut: false,
          isSigner: false
        },
        {
          name: "prismData",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    }
  ],
  types: [
    {
      name: "AmountWithSlippage",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount",
            type: "u64"
          },
          {
            name: "slippageBps",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "SplitLegDeeper",
      type: {
        kind: "struct",
        fields: [
          {
            name: "percent",
            type: "u8"
          },
          {
            name: "swapLeg",
            type: {
              defined: "SwapLegSwap"
            }
          }
        ]
      }
    },
    {
      name: "SplitLeg",
      type: {
        kind: "struct",
        fields: [
          {
            name: "percent",
            type: "u8"
          },
          {
            name: "swapLeg",
            type: {
              defined: "SwapLegDeeper"
            }
          }
        ]
      }
    },
    {
      name: "SwapInstrution",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Swap",
            fields: [
              {
                defined: "Swap"
              }
            ]
          }
        ]
      }
    },
    {
      name: "Side",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Bid"
          },
          {
            name: "Ask"
          }
        ]
      }
    },
    {
      name: "SwapLegSwap",
      type: {
        kind: "enum",
        variants: [
          {
            name: "PlaceholderOne"
          },
          {
            name: "PlaceholderTwo"
          },
          {
            name: "Swap",
            fields: [
              {
                name: "swap",
                type: {
                  defined: "Swap"
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "SwapLegDeeper",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Chain",
            fields: [
              {
                name: "swap_legs",
                type: {
                  vec: {
                    defined: "SwapLegSwap"
                  }
                }
              }
            ]
          },
          {
            name: "Split",
            fields: [
              {
                name: "split_legs",
                type: {
                  vec: {
                    defined: "SplitLegDeeper"
                  }
                }
              }
            ]
          },
          {
            name: "Swap",
            fields: [
              {
                name: "swap",
                type: {
                  defined: "Swap"
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "SwapLeg",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Chain",
            fields: [
              {
                name: "swap_legs",
                type: {
                  vec: {
                    defined: "SwapLegDeeper"
                  }
                }
              }
            ]
          },
          {
            name: "Split",
            fields: [
              {
                name: "split_legs",
                type: {
                  vec: {
                    defined: "SplitLeg"
                  }
                }
              }
            ]
          },
          {
            name: "Swap",
            fields: [
              {
                name: "swap",
                type: {
                  defined: "Swap"
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "Swap",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Saber"
          },
          {
            name: "SaberAddDecimalsDeposit"
          },
          {
            name: "SaberAddDecimalsWithdraw"
          },
          {
            name: "TokenSwap"
          },
          {
            name: "Sencha"
          },
          {
            name: "Step"
          },
          {
            name: "Cropper"
          },
          {
            name: "Raydium"
          },
          {
            name: "Crema",
            fields: [
              {
                name: "a_to_b",
                type: "bool"
              }
            ]
          },
          {
            name: "Lifinity"
          },
          {
            name: "Mercurial"
          },
          {
            name: "Cykura"
          },
          {
            name: "Serum",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "MarinadeDeposit"
          },
          {
            name: "MarinadeUnstake"
          },
          {
            name: "Aldrin",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "AldrinV2",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "Whirlpool",
            fields: [
              {
                name: "a_to_b",
                type: "bool"
              }
            ]
          },
          {
            name: "Invariant",
            fields: [
              {
                name: "x_to_y",
                type: "bool"
              }
            ]
          },
          {
            name: "Meteora"
          },
          {
            name: "GooseFX"
          },
          {
            name: "DeltaFi",
            fields: [
              {
                name: "stable",
                type: "bool"
              }
            ]
          },
          {
            name: "Balansol"
          },
          {
            name: "MarcoPolo",
            fields: [
              {
                name: "x_to_y",
                type: "bool"
              }
            ]
          },
          {
            name: "Dradex",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "LifinityV2"
          },
          {
            name: "RaydiumClmm"
          },
          {
            name: "Openbook",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "Phoenix",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "Symmetry",
            fields: [
              {
                name: "fromTokenId",
                type: "u64"
              },
              {
                name: "toTokenId",
                type: "u64"
              }
            ]
          }
        ]
      }
    },
    {
      name: "SwapAction",
      type: {
        kind: "enum",
        variants: [
          {
            name: "SetupSplit",
            fields: [
              {
                name: "percents",
                type: "bytes"
              }
            ]
          },
          {
            name: "NextSplitLeg"
          },
          {
            name: "MergeSplit"
          },
          {
            name: "Swap",
            fields: [
              {
                name: "swap",
                type: {
                  defined: "Swap"
                }
              }
            ]
          }
        ]
      }
    }
  ],
  events: [
    {
      name: "Swap",
      fields: [
        {
          name: "amm",
          type: "publicKey",
          index: false
        },
        {
          name: "inputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "inputAmount",
          type: "u64",
          index: false
        },
        {
          name: "outputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "outputAmount",
          type: "u64",
          index: false
        }
      ]
    },
    {
      name: "Fee",
      fields: [
        {
          name: "account",
          type: "publicKey",
          index: false
        },
        {
          name: "mint",
          type: "publicKey",
          index: false
        },
        {
          name: "amount",
          type: "u64",
          index: false
        }
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "EmptyRoute",
      msg: "Empty route"
    },
    {
      code: 6001,
      name: "SlippageToleranceExceeded",
      msg: "Slippage tolerance exceeded"
    },
    {
      code: 6002,
      name: "InvalidCalculation",
      msg: "Invalid calculation"
    },
    {
      code: 6003,
      name: "MissingPlatformFeeAccount",
      msg: "Missing platform fee account"
    },
    {
      code: 6004,
      name: "InvalidSlippage",
      msg: "Invalid slippage"
    },
    {
      code: 6005,
      name: "NotEnoughPercent",
      msg: "Not enough percent to 100"
    },
    {
      code: 6006,
      name: "InAmountsStackIsEmpty",
      msg: "In amounts stack is empty"
    },
    {
      code: 6007,
      name: "OutAmountsStackIsEmpty",
      msg: "Out amounts stack is empty"
    },
    {
      code: 6008,
      name: "NotEnoughAccountKeys",
      msg: "Not Enough Account keys"
    }
  ]
};

// src/utils/errors.ts
import { parseErrorForTransaction, TransactionError, UNKNOWN_ERROR } from "@mercurial-finance/optimist";

// src/constants.ts
import { Program } from "@coral-xyz/anchor";
import { PublicKey } from "@solana/web3.js";

// src/idl/jupiter5.ts
var IDL_V5 = {
  version: "0.1.0",
  name: "jupiter",
  instructions: [
    {
      name: "route",
      docs: ["route_plan Topologically sorted trade DAG"],
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "destinationTokenAccount",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "routePlan",
          type: {
            vec: {
              defined: "RoutePlanStep"
            }
          }
        },
        {
          name: "inAmount",
          type: "u64"
        },
        {
          name: "quotedOutAmount",
          type: "u64"
        },
        {
          name: "slippageBps",
          type: "u16"
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "whirlpoolSwapExactOutput",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "whirlpool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray0",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray1",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray2",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false,
          docs: ["Oracle is currently unused and will be enabled on subsequent updates"]
        }
      ],
      args: [
        {
          name: "outAmount",
          type: "u64"
        },
        {
          name: "inAmountWithSlippage",
          type: {
            defined: "AmountWithSlippage"
          }
        },
        {
          name: "aToB",
          type: "bool"
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "raydiumSwapExactOutput",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammId",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgramId",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "userSourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceOwner",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "outAmount",
          type: "u64"
        },
        {
          name: "inAmountWithSlippage",
          type: {
            defined: "AmountWithSlippage"
          }
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "raydiumClmmSwapExactOutput",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "ammConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolState",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "observationState",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tickArray",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "outAmount",
          type: "u64"
        },
        {
          name: "inAmountWithSlippage",
          type: {
            defined: "AmountWithSlippage"
          }
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "createOpenOrders",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "dexProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "market",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "mercurialSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapState",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationTokenAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "cykuraSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "factoryState",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolState",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "lastObservationState",
          isMut: true,
          isSigner: false
        },
        {
          name: "coreProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "serumSwap",
      accounts: [
        {
          name: "market",
          accounts: [
            {
              name: "market",
              isMut: true,
              isSigner: false
            },
            {
              name: "openOrders",
              isMut: true,
              isSigner: false
            },
            {
              name: "requestQueue",
              isMut: true,
              isSigner: false
            },
            {
              name: "eventQueue",
              isMut: true,
              isSigner: false
            },
            {
              name: "bids",
              isMut: true,
              isSigner: false
            },
            {
              name: "asks",
              isMut: true,
              isSigner: false
            },
            {
              name: "coinVault",
              isMut: true,
              isSigner: false
            },
            {
              name: "pcVault",
              isMut: true,
              isSigner: false
            },
            {
              name: "vaultSigner",
              isMut: false,
              isSigner: false
            }
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "orderPayerTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "coinWallet",
          isMut: true,
          isSigner: false
        },
        {
          name: "pcWallet",
          isMut: true,
          isSigner: false
        },
        {
          name: "dexProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "saberSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "inputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "feesTokenAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "saberAddDecimals",
      accounts: [
        {
          name: "addDecimalsProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "wrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "wrapperMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "wrapperUnderlyingTokens",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "userUnderlyingTokens",
          isMut: true,
          isSigner: false
        },
        {
          name: "userWrappedTokens",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "tokenSwap",
      accounts: [
        {
          name: "tokenSwapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolFee",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "senchaSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: true,
          isSigner: false
        },
        {
          name: "userAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "inputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputFeesAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputFeesAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "stepSwap",
      accounts: [
        {
          name: "tokenSwapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolFee",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "cropperSwap",
      accounts: [
        {
          name: "tokenSwapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapState",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolFee",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "raydiumSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammId",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgramId",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "userSourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceOwner",
          isMut: false,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "cremaSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "clmmConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "clmmpool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenA",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenB",
          isMut: false,
          isSigner: false
        },
        {
          name: "accountA",
          isMut: true,
          isSigner: false
        },
        {
          name: "accountB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenAVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenBVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArrayMap",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "partner",
          isMut: false,
          isSigner: false
        },
        {
          name: "partnerAtaA",
          isMut: true,
          isSigner: false
        },
        {
          name: "partnerAtaB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "lifinitySwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pythAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "pythPcAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "configAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "marinadeDeposit",
      accounts: [
        {
          name: "marinadeFinanceProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "msolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolSolLegPda",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolMsolLeg",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolMsolLegAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "reservePda",
          isMut: true,
          isSigner: false
        },
        {
          name: "transferFrom",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintTo",
          isMut: true,
          isSigner: false
        },
        {
          name: "msolMintAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "userWsolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tempWsolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: true,
          isSigner: true
        },
        {
          name: "wsolMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "marinadeUnstake",
      accounts: [
        {
          name: "marinadeFinanceProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "msolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolSolLegPda",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolMsolLeg",
          isMut: true,
          isSigner: false
        },
        {
          name: "treasuryMsolAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "getMsolFrom",
          isMut: true,
          isSigner: false
        },
        {
          name: "getMsolFromAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "transferSolTo",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "userWsolTokenAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "aldrinSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "feePoolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "walletAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "userBaseTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "aldrinV2Swap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "feePoolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "walletAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "userBaseTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "curve",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "whirlpoolSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "whirlpool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray0",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray1",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray2",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false,
          docs: ["Oracle is currently unused and will be enabled on subsequent updates"]
        }
      ],
      args: []
    },
    {
      name: "invariantSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickmap",
          isMut: true,
          isSigner: false
        },
        {
          name: "accountX",
          isMut: true,
          isSigner: false
        },
        {
          name: "accountY",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveX",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveY",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "meteoraSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminTokenFee",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "goosefxSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "controller",
          isMut: false,
          isSigner: false
        },
        {
          name: "pair",
          isMut: true,
          isSigner: false
        },
        {
          name: "sslIn",
          isMut: true,
          isSigner: false
        },
        {
          name: "sslOut",
          isMut: true,
          isSigner: false
        },
        {
          name: "liabilityVaultIn",
          isMut: true,
          isSigner: false
        },
        {
          name: "swappedLiabilityVaultIn",
          isMut: true,
          isSigner: false
        },
        {
          name: "liabilityVaultOut",
          isMut: true,
          isSigner: false
        },
        {
          name: "swappedLiabilityVaultOut",
          isMut: true,
          isSigner: false
        },
        {
          name: "userInAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userOutAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeCollectorAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userWallet",
          isMut: false,
          isSigner: true
        },
        {
          name: "feeCollector",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "deltafiSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "marketConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "deltafiUser",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "pythPriceBase",
          isMut: false,
          isSigner: false
        },
        {
          name: "pythPriceQuote",
          isMut: false,
          isSigner: false
        },
        {
          name: "userAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "balansolSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "taxMan",
          isMut: true,
          isSigner: false
        },
        {
          name: "bidMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "treasurer",
          isMut: false,
          isSigner: false
        },
        {
          name: "srcTreasury",
          isMut: true,
          isSigner: false
        },
        {
          name: "srcAssociatedTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "askMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "dstTreasury",
          isMut: true,
          isSigner: false
        },
        {
          name: "dstAssociatedTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "dstTokenAccountTaxman",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "marcoPoloSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapperXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapperYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapper",
          isMut: true,
          isSigner: true
        },
        {
          name: "referrerXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referrerYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referrer",
          isMut: true,
          isSigner: false
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "dradexSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pair",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "dexUser",
          isMut: false,
          isSigner: false
        },
        {
          name: "marketUser",
          isMut: true,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "t0Vault",
          isMut: true,
          isSigner: false
        },
        {
          name: "t1Vault",
          isMut: true,
          isSigner: false
        },
        {
          name: "t0User",
          isMut: true,
          isSigner: false
        },
        {
          name: "t1User",
          isMut: true,
          isSigner: false
        },
        {
          name: "master",
          isMut: false,
          isSigner: false
        },
        {
          name: "signer",
          isMut: true,
          isSigner: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "logger",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "lifinityV2Swap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "oracleMainAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "oracleSubAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "oraclePcAccount",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "raydiumClmmSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "ammConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolState",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "observationState",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tickArray",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "phoenixSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "symmetrySwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "buyer",
          isMut: false,
          isSigner: true
        },
        {
          name: "fundState",
          isMut: true,
          isSigner: false
        },
        {
          name: "pdaAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "pdaFromTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "buyerFromTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "pdaToTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "buyerToTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapFeeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "hostFeeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "managerFeeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenInfo",
          isMut: false,
          isSigner: false
        },
        {
          name: "prismData",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    }
  ],
  types: [
    {
      name: "AmountWithSlippage",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount",
            type: "u64"
          },
          {
            name: "slippageBps",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "RoutePlanStep",
      type: {
        kind: "struct",
        fields: [
          {
            name: "swap",
            type: {
              defined: "Swap"
            }
          },
          {
            name: "percent",
            type: "u8"
          },
          {
            name: "inputIndex",
            type: "u8"
          },
          {
            name: "outputIndex",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "Side",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Bid"
          },
          {
            name: "Ask"
          }
        ]
      }
    },
    {
      name: "Swap",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Saber"
          },
          {
            name: "SaberAddDecimalsDeposit"
          },
          {
            name: "SaberAddDecimalsWithdraw"
          },
          {
            name: "TokenSwap"
          },
          {
            name: "Sencha"
          },
          {
            name: "Step"
          },
          {
            name: "Cropper"
          },
          {
            name: "Raydium"
          },
          {
            name: "Crema",
            fields: [
              {
                name: "a_to_b",
                type: "bool"
              }
            ]
          },
          {
            name: "Lifinity"
          },
          {
            name: "Mercurial"
          },
          {
            name: "Cykura"
          },
          {
            name: "Serum",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "MarinadeDeposit"
          },
          {
            name: "MarinadeUnstake"
          },
          {
            name: "Aldrin",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "AldrinV2",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "Whirlpool",
            fields: [
              {
                name: "a_to_b",
                type: "bool"
              }
            ]
          },
          {
            name: "Invariant",
            fields: [
              {
                name: "x_to_y",
                type: "bool"
              }
            ]
          },
          {
            name: "Meteora"
          },
          {
            name: "GooseFX"
          },
          {
            name: "DeltaFi",
            fields: [
              {
                name: "stable",
                type: "bool"
              }
            ]
          },
          {
            name: "Balansol"
          },
          {
            name: "MarcoPolo",
            fields: [
              {
                name: "x_to_y",
                type: "bool"
              }
            ]
          },
          {
            name: "Dradex",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "LifinityV2"
          },
          {
            name: "RaydiumClmm"
          },
          {
            name: "Openbook",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "Phoenix",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "Symmetry",
            fields: [
              {
                name: "from_token_id",
                type: "u64"
              },
              {
                name: "to_token_id",
                type: "u64"
              }
            ]
          }
        ]
      }
    }
  ],
  events: [
    {
      name: "SwapEvent",
      fields: [
        {
          name: "amm",
          type: "publicKey",
          index: false
        },
        {
          name: "inputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "inputAmount",
          type: "u64",
          index: false
        },
        {
          name: "outputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "outputAmount",
          type: "u64",
          index: false
        }
      ]
    },
    {
      name: "FeeEvent",
      fields: [
        {
          name: "account",
          type: "publicKey",
          index: false
        },
        {
          name: "mint",
          type: "publicKey",
          index: false
        },
        {
          name: "amount",
          type: "u64",
          index: false
        }
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "EmptyRoute",
      msg: "Empty route"
    },
    {
      code: 6001,
      name: "SlippageToleranceExceeded",
      msg: "Slippage tolerance exceeded"
    },
    {
      code: 6002,
      name: "InvalidCalculation",
      msg: "Invalid calculation"
    },
    {
      code: 6003,
      name: "MissingPlatformFeeAccount",
      msg: "Missing platform fee account"
    },
    {
      code: 6004,
      name: "InvalidSlippage",
      msg: "Invalid slippage"
    },
    {
      code: 6005,
      name: "NotEnoughPercent",
      msg: "Not enough percent to 100"
    },
    {
      code: 6006,
      name: "InvalidInputIndex",
      msg: "Token input index is invalid"
    },
    {
      code: 6007,
      name: "InvalidOutputIndex",
      msg: "Token output index is invalid"
    },
    {
      code: 6008,
      name: "NotEnoughAccountKeys",
      msg: "Not Enough Account keys"
    },
    {
      code: 6009,
      name: "NonZeroMinimumOutAmountNotSupported",
      msg: "Non zero minimum out amount not supported"
    },
    {
      code: 6010,
      name: "InvalidRoutePlan",
      msg: "Invalid route plan"
    }
  ]
};

// src/constants.ts
var JUPITER_PROGRAM_V4_ID = new PublicKey("JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB");
var JUPITER_PROGRAM_V5_ID = new PublicKey("JUP5pEAZeHdHrLxh5UCwAbpjGwYKKoquCpda2hfP4u8");
var JUPITER_PROGRAM_V5_1_ID = new PublicKey("JUP5cHjnnCx2DppVsufsLrXs8EBZeEZzGtEK9Gdz6ow");
var JUPITER_PROGRAM_ID_DEVNET = new PublicKey("BHzPYvC5J38kUeqkcUXwfraLWJ68cmGWm43ksF3i8bmk");
var JUPITER_PROGRAM_ID_STAGING = new PublicKey("JUPSjgjMFjU4453KMgxhqVmzep6W352bQpE4RsNqXAx");
var JUPITER_PROGRAM_ID_PRODUCTION = JUPITER_PROGRAM_V4_ID;
var JUPITER_PROGRAM_ID = JUPITER_PROGRAM_ID_PRODUCTION;
var JUPITER_PROGRAM = new Program(IDL_V4, JUPITER_PROGRAM_ID, {});
var MAINNET_SERUM_DEX_PROGRAM = new PublicKey("9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin");
var DEVNET_SERUM_DEX_PROGRAM = new PublicKey("DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY");
var RAYDIUM_AMM_V4_PROGRAM_ID = new PublicKey("675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8");
var ALDRIN_SWAP_PROGRAM_ID = new PublicKey("AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6");
var ALDRIN_SWAP_V2_PROGRAM_ID = new PublicKey("CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4");
var SABER_ADD_DECIMALS_PROGRAM_ID = new PublicKey("DecZY86MU5Gj7kppfUCEmd4LbXXuyZH1yHaP2NTqdiZB");
var CROPPER_PROGRAM_ID = new PublicKey("CTMAxxk34HjKWxQ3QLZK1HpaLXmBveao3ESePXbiyfzh");
var SENCHA_PROGRAM_ID = new PublicKey("SCHAtsf8mbjyjiv4LkhLKutTf6JnZAbdJKFkXQNMFHZ");
var LIFINITY_PROGRAM_ID = new PublicKey("EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S");
var CREMA_PROGRAM_ID = new PublicKey("CLMM9tUoggJu2wagPkkqs9eFG4BWhVBZWkP1qv3Sp7tR");
var CREMA_PARTNER_ACCOUNT = new PublicKey("FxYoB1VAx8TfLCwvmworJy16VH89v992qznUvBX5aR8K");
var MERCURIAL_SWAP_PROGRAM_ID = new PublicKey("MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky");
var WHIRLPOOL_PROGRAM_ID = new PublicKey("whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc");
var INVARIANT_PROGRAM_ID = new PublicKey("HyaB3W9q6XdA5xwpU4XnSZV94htfmbmqJXZcEbRaJutt");
var INVARIANT_STATE_ID = new PublicKey("8NsPwRFYqob3FzYvHYTjFK6WVFJADFN8Hn7yNQKcVNW1");
var INVARIANT_PROGRAM_AUTHORITY_ID = new PublicKey("J4uBbeoWpZE8fH58PM1Fp9n9K6f1aThyeVCyRdJbaXqt");
var CYKURA_PROGRAM_ID = new PublicKey("cysPXAjehMpVKUapzbMCCnpFxUFFryEWEaLgnb9NrR8");
var CYKURA_FACTORY_STATE_ADDRESS = new PublicKey("DBsMwKfeoUHhxMi9x6wd2AsT12UwUCssjNbUzu1aKgqj");
var MARINADE_PROGRAM_ID = new PublicKey("MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD");
var STEPN_PROGRAM_ID = new PublicKey("Dooar9JkhdZ7J3LHN3A7YCuoGRUggXhQaG4kijfLGU2j");
var ORCA_V1_PROGRAM_ID = new PublicKey("DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1");
var ORCA_V2_PROGRAM_ID = new PublicKey("9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP");
var STEP_TOKEN_SWAP_PROGRAM_ID = new PublicKey("SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1");
var PENGUIN_PROGRAM_ID = new PublicKey("PSwapMdSai8tjrEXcxFeQth87xC4rRsa4VA5mhGhXkP");
var SAROS_PROGRAM_ID = new PublicKey("SSwapUtytfBdBn1b9NUGG6foMVPtcWgpRU32HToDUZr");
var METEORA_PROGRAM_ID = new PublicKey("Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB");
var METEORA_VAULT_PROGRAM_ID = new PublicKey("24Uqj9JCLxUeoC3hGfh5W3s9FM9uCHDS2SG3LYwBpyTi");
var DELTA_FI_PROGRAM_ID = new PublicKey("GNExJhNUhc9LN2DauuQAUJnXoy6DJ6zey3t9kT9A2PF3");
var DELTA_FI_USER_ID = new PublicKey("ziSPuDShwunW4xNrCfTnSHTPVT6FZDREtdofpf1BJwe");
var GOOSE_FX_PROGRAM_ID = new PublicKey("7WduLbRfYhTJktjLw5FDEyrqoEv61aTTCuGAetgLjzN5");
var GOOSE_FX_CONTROLLER_ID = new PublicKey("8CxKnuJeoeQXFwiG6XiGY2akBjvJA5k3bE52BfnuEmNQ");
var BALANSOL_PROGRAM_ID = new PublicKey("D3BBjqUdCYuP18fNvvMbPAZ8DpcRi4io2EsYHQawJDag");
var DRADEX_PROGRAM_ID = new PublicKey("dp2waEWSBy5yKmq65ergoU3G6qRLmqa6K7We4rZSKph");
var DRADEX_LOGGER_PROGRAM_ID = new PublicKey("1gE3LGQze8DQ3KD2C4ZUCmRX5g4njhY5yLfYmnmcvJR");
var DRADEX_MASTER_ID = new PublicKey("76ygWLcvJLR6nSzRUpiQqqtX4Pabkq4vpaTxwr3mDcXA");
var LIFINITY_V2_PROGRAM_ID = new PublicKey("2wT8Yq49kHgDzXuPxZSaeLaH1qbmGXtEyPy64bL7aD3c");
var DRADEX_DEX_USER = new PublicKey("571oqNkJauZ2tccLwf8CUB56hpLPZkop9X1Px4DE9rnQ");
var RAYDIUM_CLMM_PROGRAM_ID = new PublicKey("CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK");
var OPENBOOK_PROGRAM_ID = new PublicKey("srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX");
var MARCO_POLO_PROGRAM_ID = new PublicKey("9tKE7Mbmj4mxDjWatikzGAtkoWosiiZX9y6J4Hfm2R8H");
var MARCO_POLO_STATE_ID = new PublicKey("BE5YRQ6N6LCw7UL3JwzVp317EWa4mzJY6JKDaudcXu7A");
var MARCO_POLO_PROGRAM_AUTHORITY = new PublicKey("JM78XNzeQRmZXDAP4DSq88ZdErbuSXSLE6fkRsVDKSu");
var BONK_SWAP_PROGRAM_ID = new PublicKey("BSwp6bEBihVLdqJRKGgzjcGLHkcTuzmSo1TQkHepzH8p");
var BONK_SWAP_STATE_ID = new PublicKey("2QWN6WjrJ3RAk51ecxLxaLPfFCYLAnmWJwJ1oKA92CRD");
var BONK_SWAP_PROGRAM_AUTHORITY = new PublicKey("8NyaPDJeC2eaBGpkRpZKnD9S448AZGgjSvumFe92DRK2");
var PHOENIX_PROGRAM_ID = new PublicKey("PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY");
var SYMMETRY_PROGRAM_ID = new PublicKey("2KehYt3KsEQR53jYcxjbQp2d2kCp4AkuQW68atufRwSr");
var WRAPPED_SOL_MINT = new PublicKey("So11111111111111111111111111111111111111112");
var MARKETS_URL = {
  devnet: "https://jupiter-devnet.zhen8558.workers.dev/markets?v=3",
  "mainnet-beta": "https://cache.jup.ag/markets?v=3",
  testnet: "https://api.jup.ag/api/markets/cache/devnet"
};
var INDEXED_ROUTE_MAP_URL = "https://cache.jup.ag/indexed-route-maps-v3";
var TOKEN_LIST_URL = {
  devnet: "https://api.jup.ag/api/tokens/devnet",
  testnet: "https://api.jup.ag/api/markets/devnet",
  "mainnet-beta": "https://cache.jup.ag/tokens"
};
var LAMPORTS_PER_SIGNATURE = 5e3;
var JUPITER_FEE_OWNER = new PublicKey("BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9");
var COMMON_ERRORS = {
  AlreadyInUse: {
    code: 1,
    name: "AlreadyInUsed",
    msg: "Account already In Used"
  },
  InsufficientSOL: {
    code: 1,
    name: "InsufficientSOL",
    msg: "Insufficient SOL"
  },
  TransactionNotConfirmed: {
    code: 7e3,
    name: "TransactionNotConfirmed",
    msg: "Transaction was not confirmed"
  },
  BalancesNotExtractedProperly: {
    code: 7001,
    name: "BalancesNotExtractedProperly",
    msg: "Balances cannot be extracted properly"
  }
};
var JUPITER_V5_ERRORS = Object.freeze({
  ...COMMON_ERRORS,
  ...IDL_V5.errors.reduce((accErrors, error) => {
    return { ...accErrors, [error.name]: error };
  }, {})
});

// src/utils/errors.ts
function validateTransactionResponse({
  txid,
  transactionResponse
}) {
  var _a;
  if (!transactionResponse) {
    const errorDetails = COMMON_ERRORS["TransactionNotConfirmed"];
    return new TransactionError(errorDetails.msg, txid, errorDetails.code, [JUPITER_PROGRAM_ID.toBase58()]);
  }
  if ((_a = transactionResponse == null ? void 0 : transactionResponse.meta) == null ? void 0 : _a.err) {
    let { message, programIds, code } = parseErrorForTransaction(transactionResponse);
    if (((programIds == null ? void 0 : programIds[0]) === JUPITER_PROGRAM_V5_ID.toBase58() || (programIds == null ? void 0 : programIds[0]) === JUPITER_PROGRAM_V5_1_ID.toBase58()) && code) {
      Object.values(JUPITER_V5_ERRORS).some((error) => {
        if (error.code === code) {
          message = error.msg;
          return true;
        }
        return;
      });
    }
    if (!message) {
      message = UNKNOWN_ERROR;
    }
    return new TransactionError(message || "Something went wrong", txid, code, programIds);
  }
  return transactionResponse;
}

// src/utils/transactionHelpers.ts
import { TransactionError as TransactionError2 } from "@mercurial-finance/optimist";
import bs58 from "bs58";

// src/utils/wait.ts
var wait = (time) => new Promise((resolve) => setTimeout(resolve, time));

// src/utils/eventExtractor.ts
import { EventParser } from "@coral-xyz/anchor";
import { BorshCoder } from "@coral-xyz/anchor";
var EventExtractor = class {
  constructor() {
    this.coder = new BorshCoder(IDL_V5);
    this.parser = new EventParser(JUPITER_PROGRAM_V5_1_ID, this.coder);
  }
  getEvents(logs) {
    return [...this.parser.parseLogs(logs)];
  }
};

// src/utils/transactionHelpers.ts
import { BN } from "@coral-xyz/anchor";
function getKeyMap(message, accountKeysFromLookups) {
  return message.getAccountKeys({ accountKeysFromLookups }).keySegments().flat().reduce((acc, key, index) => {
    acc.set(key.toBase58(), index);
    return acc;
  }, /* @__PURE__ */ new Map());
}
function diffTokenBalance(accountKeyIndex, meta) {
  var _a, _b, _c, _d;
  const postBalance = (_b = (_a = meta.postTokenBalances) == null ? void 0 : _a.find(
    (postTokenBalance) => postTokenBalance.accountIndex === accountKeyIndex
  )) == null ? void 0 : _b.uiTokenAmount.amount;
  const preBalance = (_d = (_c = meta.preTokenBalances) == null ? void 0 : _c.find((preTokenBalance) => preTokenBalance.accountIndex === accountKeyIndex)) == null ? void 0 : _d.uiTokenAmount.amount;
  if (!postBalance)
    return;
  return Math.abs(parseInt(postBalance) - (preBalance !== void 0 ? parseInt(preBalance) : 0));
}
function extractTokenBalanceChangeFromTransaction(meta, keyMap, tokenAccountAddress) {
  if (!meta)
    return;
  const accountKeyIndex = keyMap.get(tokenAccountAddress.toBase58());
  if (accountKeyIndex === void 0)
    return;
  return diffTokenBalance(accountKeyIndex, meta);
}
function extractSOLChangeFromTransaction(meta, keyMap, user) {
  const accountKeyIndex = keyMap.get(user.toBase58());
  if (accountKeyIndex !== void 0) {
    return Math.abs(meta.postBalances[accountKeyIndex] - meta.preBalances[accountKeyIndex]);
  }
  return 0;
}
function extractInputTokenBalanceChange(events, mint) {
  let balanceChange = new BN(0);
  events.forEach((event) => {
    console.log({
      mint: mint.toBase58(),
      inputMint: event.data.inputMint.toBase58(),
      inputAmoutn: event.data.inputAmount.toNumber()
    });
    if (event.data.inputMint.equals(mint)) {
      balanceChange = balanceChange.add(event.data.inputAmount);
    }
  });
  return balanceChange.toNumber();
}
function extractOutputTokenBalanceChange(events, mint) {
  let balanceChange = new BN(0);
  events.forEach((event) => {
    console.log({
      mint: mint.toBase58(),
      outputMint: event.data.outputMint.toBase58(),
      outputAmoutn: event.data.outputAmount.toNumber()
    });
    if (event.data.outputMint.equals(mint)) {
      balanceChange = balanceChange.add(event.data.outputAmount);
    }
  });
  return balanceChange.toNumber();
}
function getTokenBalanceChangesFromTransactionResponse({
  txid,
  inputMint,
  outputMint,
  user,
  sourceAddress,
  destinationAddress,
  transactionResponse,
  hasWrappedSOL
}) {
  let sourceTokenBalanceChange;
  let destinationTokenBalanceChange;
  if (transactionResponse && transactionResponse.meta) {
    let { meta, transaction } = transactionResponse;
    const logMessages = meta.logMessages;
    if (logMessages) {
      const extractor = new EventExtractor();
      const events = extractor.getEvents(logMessages);
      const swapEvents = events.filter((event) => event.name === "SwapEvent");
      sourceTokenBalanceChange = extractInputTokenBalanceChange(swapEvents, inputMint);
      destinationTokenBalanceChange = extractOutputTokenBalanceChange(swapEvents, outputMint);
    }
    if (!sourceTokenBalanceChange && !destinationTokenBalanceChange) {
      const keyMap = getKeyMap(transaction.message, meta.loadedAddresses);
      sourceTokenBalanceChange = inputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL ? extractSOLChangeFromTransaction(meta, keyMap, user) : extractTokenBalanceChangeFromTransaction(meta, keyMap, sourceAddress);
      destinationTokenBalanceChange = outputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL ? extractSOLChangeFromTransaction(meta, keyMap, user) : extractTokenBalanceChangeFromTransaction(meta, keyMap, destinationAddress);
    }
  }
  if (!(sourceTokenBalanceChange && destinationTokenBalanceChange)) {
    throw new TransactionError2(
      "Cannot find source or destination token account balance change",
      txid,
      COMMON_ERRORS["BalancesNotExtractedProperly"].code,
      [JUPITER_PROGRAM_ID.toBase58()]
    );
  }
  return [sourceTokenBalanceChange, destinationTokenBalanceChange];
}
function getUnixTs() {
  return new Date().getTime();
}
var SEND_OPTIONS = { skipPreflight: true, maxRetries: 2 };
async function checkIsBlockhashValid({
  connection,
  blockhash
}) {
  const args = connection._buildArgs([blockhash], "processed");
  const response = await connection._rpcRequest("isBlockhashValid", args);
  const isBlockhashValid = response.result.value;
  return isBlockhashValid;
}
async function transactionSenderAndConfirmationWaiter({
  connection,
  signedTransaction,
  pollInterval = 500,
  sendInterval = 2e3,
  sendRetries = 40
}) {
  const rawTransaction = signedTransaction.serialize();
  const { blockhash } = getTransactionBlockhashAndFeePayer(signedTransaction);
  const txid = await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);
  let lastSendTimestamp = getUnixTs();
  let retries = 0;
  while (true) {
    const timestamp = getUnixTs();
    if (retries < sendRetries && timestamp - lastSendTimestamp > sendInterval) {
      lastSendTimestamp = timestamp;
      retries += 1;
      await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);
    }
    const isBlockhashValid = await checkIsBlockhashValid({ connection, blockhash });
    const response = await Promise.any([
      connection.getTransaction(txid, {
        commitment: "confirmed",
        maxSupportedTransactionVersion: 0
      }),
      wait(5e3)
    ]);
    if (response)
      return { txid, transactionResponse: response };
    if (!isBlockhashValid)
      return {
        txid,
        transactionResponse: null
      };
    await wait(pollInterval);
  }
}
function getSignature(transaction) {
  const signature = "signature" in transaction ? transaction.signature : transaction.signatures[0];
  if (!signature) {
    throw new Error("Transaction has no signature");
  }
  return bs58.encode(signature);
}
function getTransactionBlockhashAndFeePayer(transaction) {
  if ("message" in transaction) {
    return { feePayer: transaction.message.staticAccountKeys[0], blockhash: transaction.message.recentBlockhash };
  } else {
    if (!transaction.feePayer)
      throw new Error("Missing feePayer");
    if (!transaction.recentBlockhash)
      throw new Error("Missing blockhash");
    return { feePayer: transaction.feePayer, blockhash: transaction.recentBlockhash };
  }
}
function signTransaction(transaction, signers) {
  if ("message" in transaction) {
    transaction.sign(signers);
  } else {
    transaction.sign(...signers);
  }
  return getSignature(transaction);
}

// src/utils/executeTransaction.ts
var executeTransaction = async ({
  connection,
  wallet,
  onTransaction,
  inputMint,
  outputMint,
  sourceAddress,
  destinationAddress,
  swapTransaction,
  owner,
  wrapUnwrapSOL
}) => {
  let swapError = void 0;
  let swapResult = void 0;
  try {
    if (owner.signer) {
      signTransaction(swapTransaction, [owner.signer]);
    } else {
      if (!wallet)
        throw new Error("Signer wallet not found");
      swapTransaction = await wallet.signTransaction(swapTransaction);
    }
    const swapTxid = getSignature(swapTransaction);
    try {
      const swapTransactionSender = async () => {
        return await validateTransactionResponse(
          await transactionSenderAndConfirmationWaiter({ connection, signedTransaction: swapTransaction })
        );
      };
      const swapPromise = swapTransactionSender();
      onTransaction == null ? void 0 : onTransaction(swapTxid, swapPromise);
      const transactionResponse = await swapPromise;
      if (transactionResponse instanceof Error) {
        throw transactionResponse;
      }
      const [sourceTokenBalanceChange, destinationTokenBalanceChange] = await getTokenBalanceChangesFromTransactionResponse({
        txid: swapTxid,
        inputMint,
        outputMint,
        user: owner.publicKey,
        sourceAddress,
        destinationAddress,
        transactionResponse,
        hasWrappedSOL: !wrapUnwrapSOL
      });
      swapResult = {
        txid: swapTxid,
        inputAddress: sourceAddress,
        outputAddress: destinationAddress,
        inputAmount: sourceTokenBalanceChange,
        outputAmount: destinationTokenBalanceChange
      };
    } catch (e) {
      console.error(e);
      swapError = e;
    } finally {
    }
    if (swapError || !swapResult) {
      throw swapError || new Error("Swap failed");
    }
    return swapResult;
  } catch (error) {
    return { error };
  }
};

// src/utils/fee.ts
import { deserializeAccount } from "@mercurial-finance/optimist";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
async function getPlatformFeeAccounts(connection, feeAccountOwner) {
  const tokenAccounts = (await connection.getTokenAccountsByOwner(feeAccountOwner, {
    programId: TOKEN_PROGRAM_ID
  })).value;
  const feeAccounts = tokenAccounts.reduce((acc, tokenAccount) => {
    const deserializedtokenAccount = deserializeAccount(tokenAccount.account.data);
    if (deserializedtokenAccount) {
      acc.set(deserializedtokenAccount.mint.toBase58(), tokenAccount.pubkey);
    }
    return acc;
  }, /* @__PURE__ */ new Map());
  return feeAccounts;
}

// src/utils/Owner.ts
var Owner = class {
  constructor(owner) {
    this._owner = owner;
  }
  get publicKey() {
    if (Owner.isKeyPair(this._owner)) {
      return this._owner.publicKey;
    }
    return this._owner;
  }
  get signer() {
    return Owner.isKeyPair(this._owner) ? this._owner : void 0;
  }
  get isKeyPair() {
    return Owner.isKeyPair(this._owner);
  }
  get isPublicKey() {
    return Owner.isPublicKey(this._owner);
  }
  static isKeyPair(owner) {
    return owner.secretKey !== void 0;
  }
  static isPublicKey(owner) {
    return !Owner.isKeyPair(owner);
  }
};

// src/utils/indexedRouteMap.ts
function getOrAddKeyToIndexMap(pk, mintToIndexMap) {
  let keyIndex = mintToIndexMap.get(pk);
  if (keyIndex === void 0) {
    keyIndex = mintToIndexMap.size;
    mintToIndexMap.set(pk, keyIndex);
  }
  return keyIndex;
}
function routeMapToIndexedRouteMap(routeMap) {
  const { mintToIndexMap, indexedRouteMap: innerIndexedRouteMap } = Array.from(routeMap).reduce(
    ({ mintToIndexMap: mintToIndexMap2, indexedRouteMap: indexedRouteMap2 }, [key, item]) => {
      const keyIndex = getOrAddKeyToIndexMap(key, mintToIndexMap2);
      const indexedOutputMintCache = [];
      for (const routeOutputKey of item) {
        const routeOutputKeyIndex = getOrAddKeyToIndexMap(routeOutputKey, mintToIndexMap2);
        indexedOutputMintCache.push(routeOutputKeyIndex);
      }
      indexedRouteMap2[keyIndex] = indexedOutputMintCache;
      return { mintToIndexMap: mintToIndexMap2, indexedRouteMap: indexedRouteMap2 };
    },
    { mintToIndexMap: /* @__PURE__ */ new Map(), indexedRouteMap: {} }
  );
  const indexedRouteMap = {
    mintKeys: Array.from(mintToIndexMap.keys()),
    indexedRouteMap: innerIndexedRouteMap
  };
  return indexedRouteMap;
}
function indexedRouteMapToRouteMap(indexedRouteMap) {
  const getMint = (index) => indexedRouteMap.mintKeys[index];
  const generatedRouteMap = /* @__PURE__ */ new Map();
  Object.keys(indexedRouteMap.indexedRouteMap).forEach((key) => {
    generatedRouteMap.set(
      getMint(key),
      indexedRouteMap["indexedRouteMap"][key].map((index) => getMint(index))
    );
  });
  return generatedRouteMap;
}
async function getRemoteRouteMap({
  onlyDirectRoutes,
  restrictIntermediateTokens,
  asLegacyTransaction
}, indexedRouteMapUrl) {
  let url = indexedRouteMapUrl || INDEXED_ROUTE_MAP_URL;
  if (onlyDirectRoutes) {
    url = url.concat("?onlyDirectRoutes=true");
  } else if (restrictIntermediateTokens) {
    url = url.concat("?restrictIntermediateTokens=true");
  }
  if (asLegacyTransaction) {
    url = url.concat("?asLegacyTransaction=true");
  }
  const indexedRouteMap = await (await fetch(url)).json();
  return indexedRouteMapToRouteMap(indexedRouteMap);
}

// src/utils/TransactionBuilder.ts
import {
  sendAndConfirmRawTransaction,
  TransactionMessage,
  VersionedTransaction,
  Transaction
} from "@solana/web3.js";
var TransactionBuilder = class {
  constructor(connection, feePayer, owner) {
    this.connection = connection;
    this.feePayer = feePayer;
    this.instructions = [];
    this.owner = owner;
  }
  addInstruction(instruction) {
    this.instructions.push(instruction);
    return this;
  }
  async build(blockhashWithExpiryBlockHeight, addressLookupTables, asLegacyTransaction) {
    let instructions = [];
    let setupInstructions = [];
    let cleanupInstructions = [];
    let signers = [];
    this.instructions.forEach((curr) => {
      setupInstructions = setupInstructions.concat(curr.setupInstructions);
      instructions = instructions.concat(curr.instructions);
      cleanupInstructions = cleanupInstructions.concat(curr.cleanupInstructions);
      signers = signers.concat(curr.signers);
    });
    const transactionInstructions = setupInstructions.concat(instructions).concat(cleanupInstructions);
    const transaction = asLegacyTransaction ? this.buildLegacyTransaction({ transactionInstructions, blockhashWithExpiryBlockHeight }) : this.buildVersionedTransaction({
      transactionInstructions,
      blockhashWithExpiryBlockHeight,
      addressLookupTables
    });
    return {
      transaction,
      signers,
      execute: this.owner.isKeyPair ? () => {
        const signature = signTransaction(transaction, [this.owner.signer, ...signers]);
        const serializedTx = transaction.serialize();
        return sendAndConfirmRawTransaction(this.connection, Buffer.from(serializedTx), {
          signature,
          ...blockhashWithExpiryBlockHeight
        });
      } : async () => {
        throw new Error("Please use a Keypair for the owner parameter to enable the execute function");
      }
    };
  }
  buildLegacyTransaction({
    transactionInstructions,
    blockhashWithExpiryBlockHeight
  }) {
    return new Transaction({ feePayer: this.feePayer, ...blockhashWithExpiryBlockHeight }).add(
      ...transactionInstructions
    );
  }
  buildVersionedTransaction({
    transactionInstructions,
    blockhashWithExpiryBlockHeight,
    addressLookupTables
  }) {
    const transactionMessage = new TransactionMessage({
      payerKey: this.feePayer,
      instructions: transactionInstructions,
      recentBlockhash: blockhashWithExpiryBlockHeight.blockhash
    });
    const messageV0 = transactionMessage.compileToV0Message(addressLookupTables);
    return new VersionedTransaction(messageV0);
  }
};

// src/utils/instruction.ts
var getEmptyInstruction = () => ({
  setupInstructions: [],
  instructions: [],
  cleanupInstructions: [],
  signers: []
});

// src/utils/token.ts
import { deserializeAccount as deserializeAccount2 } from "@mercurial-finance/optimist";
import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID as TOKEN_PROGRAM_ID2 } from "@solana/spl-token";
import { PublicKey as PublicKey3, SystemProgram, TransactionInstruction as TransactionInstruction2 } from "@solana/web3.js";
import JSBI from "jsbi";
async function createAndCloseWSOLAccount({
  connection,
  amount,
  owner: { publicKey }
}) {
  const result = getEmptyInstruction();
  const toAccount = findAssociatedTokenAddress({
    walletAddress: publicKey,
    tokenMintAddress: WRAPPED_SOL_MINT
  });
  const info = await connection.getAccountInfo(toAccount);
  if (info === null) {
    result.setupInstructions.push(
      createAssociatedTokenAccountIdempotentInstruction(publicKey, toAccount, publicKey, WRAPPED_SOL_MINT)
    );
  }
  result.setupInstructions.push(
    SystemProgram.transfer({
      fromPubkey: publicKey,
      toPubkey: toAccount,
      lamports: JSBI.toNumber(amount)
    })
  );
  result.setupInstructions.push(
    Token.createSyncNativeInstruction(TOKEN_PROGRAM_ID2, toAccount)
  );
  result.cleanupInstructions = [
    Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID2, toAccount, publicKey, publicKey, [])
  ];
  return {
    address: toAccount,
    ...result
  };
}
async function findOrCreateAssociatedAccountByMint({
  connection,
  payer,
  owner: { publicKey },
  mintAddress,
  unwrapSOL
}) {
  const mint = typeof mintAddress === "string" ? new PublicKey3(mintAddress) : mintAddress;
  const toAccount = findAssociatedTokenAddress({
    tokenMintAddress: mint,
    walletAddress: publicKey
  });
  const result = getEmptyInstruction();
  const info = await connection.getAccountInfo(toAccount);
  if (info === null) {
    result.setupInstructions.push(createAssociatedTokenAccountIdempotentInstruction(payer, toAccount, publicKey, mint));
  } else {
    const tokenAccountInfo = deserializeAccount2(info.data);
    if (tokenAccountInfo && !tokenAccountInfo.owner.equals(publicKey)) {
      throw new Error(`/! ATA ${toAccount.toBase58()} is not owned by ${publicKey.toBase58()}`);
    }
  }
  if (mint.equals(WRAPPED_SOL_MINT) && unwrapSOL) {
    result.cleanupInstructions.push(
      Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID2, toAccount, publicKey, publicKey, [])
    );
  }
  return {
    address: toAccount,
    ...result
  };
}
function createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID2, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {
  const keys = [
    { pubkey: payer, isSigner: true, isWritable: true },
    { pubkey: associatedToken, isSigner: false, isWritable: true },
    { pubkey: owner, isSigner: false, isWritable: false },
    { pubkey: mint, isSigner: false, isWritable: false },
    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
    { pubkey: programId, isSigner: false, isWritable: false }
  ];
  return new TransactionInstruction2({
    keys,
    programId: associatedTokenProgramId,
    data: Buffer.from([1])
  });
}
var findAssociatedTokenAddress = ({
  walletAddress,
  tokenMintAddress
}) => {
  return PublicKey3.findProgramAddressSync(
    [walletAddress.toBuffer(), TOKEN_PROGRAM_ID2.toBuffer(), tokenMintAddress.toBuffer()],
    ASSOCIATED_TOKEN_PROGRAM_ID
  )[0];
};

// src/types.ts
var SwapMode = /* @__PURE__ */ ((SwapMode2) => {
  SwapMode2["ExactIn"] = "ExactIn";
  SwapMode2["ExactOut"] = "ExactOut";
  return SwapMode2;
})(SwapMode || {});

// src/instructions.ts
import { PublicKey as PublicKey4, SystemProgram as SystemProgram2, SYSVAR_RENT_PUBKEY } from "@solana/web3.js";
function createOpenOrdersInstruction(serumMarket, serumProgramId, userTransferAuthority) {
  const [openOrders] = PublicKey4.findProgramAddressSync(
    [Buffer.from("open_orders"), serumMarket.toBuffer(), userTransferAuthority.toBuffer()],
    JUPITER_PROGRAM_ID
  );
  const ix = JUPITER_PROGRAM.instruction.createOpenOrders({
    accounts: {
      openOrders,
      payer: userTransferAuthority,
      dexProgram: serumProgramId,
      systemProgram: SystemProgram2.programId,
      rent: SYSVAR_RENT_PUBKEY,
      market: serumMarket
    }
  });
  return [openOrders, ix];
}
async function getOrCreateOpenOrdersAddress(connection, user, serumMarket, serumProgramId) {
  const result = getEmptyInstruction();
  const [newOpenOrdersAddress, ix] = createOpenOrdersInstruction(serumMarket, serumProgramId, user);
  const newOpenOrdersAddressInfo = await connection.getAccountInfo(newOpenOrdersAddress);
  if (!newOpenOrdersAddressInfo) {
    result.setupInstructions = [ix];
  }
  return {
    ...result,
    address: newOpenOrdersAddress
  };
}
async function getAtaInstructions({
  connection,
  outputMints,
  owner,
  unwrapSOL
}) {
  const userTokenAccountResults = await Promise.all(
    outputMints.map(
      (outputMint) => findOrCreateAssociatedAccountByMint({
        connection,
        payer: owner.publicKey,
        owner,
        mintAddress: outputMint,
        unwrapSOL
      })
    )
  );
  const [userDestinationTokenAccountResult] = userTokenAccountResults.splice(userTokenAccountResults.length - 1, 1);
  return {
    userIntermediaryTokenAccountResults: userTokenAccountResults,
    userDestinationTokenAccountResult
  };
}

// src/fee.ts
var SERUM_OPEN_ACCOUNT_LAMPORTS = 23352760;
var OPEN_TOKEN_ACCOUNT_LAMPORTS = 2039280;
var WALLET_RENT_EXEMPT_MINIMUM = 890880;
var LAMPORTS_PER_SIGNATURE2 = 5e3;
function sum(values) {
  return values.reduce((value, acc) => {
    acc += value;
    return acc;
  }, 0);
}
var calculateTransactionDepositAndFee = ({
  intermediates,
  destination,
  openOrders,
  hasWrapUnwrapSOL,
  feeCalculator
}) => {
  const openOrdersDeposits = openOrders.filter((ooi) => ooi && ooi.setupInstructions.length > 0).map(() => SERUM_OPEN_ACCOUNT_LAMPORTS);
  const ataDeposits = [...intermediates, destination].filter((item) => (item == null ? void 0 : item.setupInstructions.length) && item.cleanupInstructions.length === 0).map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS);
  const signatureFee = feeCalculator.lamportsPerSignature;
  const totalFeeAndDeposits = sum([signatureFee, ...openOrdersDeposits, ...ataDeposits]);
  const minimumSOLForTransaction = sum([
    signatureFee,
    ...openOrdersDeposits,
    ...ataDeposits,
    WALLET_RENT_EXEMPT_MINIMUM,
    hasWrapUnwrapSOL ? OPEN_TOKEN_ACCOUNT_LAMPORTS : 0
  ]);
  return {
    signatureFee,
    openOrdersDeposits,
    ataDeposits,
    totalFeeAndDeposits,
    minimumSOLForTransaction
  };
};
var calculateTransactionDepositAndFeeV2 = ({
  numOfAtasToBeCreated,
  numOfOpenOrdersToBeCreated
}) => {
  const openOrdersDeposits = new Array(numOfOpenOrdersToBeCreated).fill(0).map(() => SERUM_OPEN_ACCOUNT_LAMPORTS);
  const ataDeposits = new Array(numOfAtasToBeCreated).fill(0).map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS);
  const signatureFee = LAMPORTS_PER_SIGNATURE2;
  const totalFeeAndDeposits = sum([signatureFee, ...openOrdersDeposits, ...ataDeposits]);
  const minimumSOLForTransaction = sum([
    signatureFee,
    ...openOrdersDeposits,
    ...ataDeposits,
    WALLET_RENT_EXEMPT_MINIMUM
  ]);
  return {
    signatureFee,
    openOrdersDeposits,
    ataDeposits,
    totalFeeAndDeposits,
    minimumSOLForTransaction
  };
};
export {
  ALDRIN_SWAP_PROGRAM_ID,
  ALDRIN_SWAP_V2_PROGRAM_ID,
  BALANSOL_PROGRAM_ID,
  BONK_SWAP_PROGRAM_AUTHORITY,
  BONK_SWAP_PROGRAM_ID,
  BONK_SWAP_STATE_ID,
  COMMON_ERRORS,
  CREMA_PARTNER_ACCOUNT,
  CREMA_PROGRAM_ID,
  CROPPER_PROGRAM_ID,
  CYKURA_FACTORY_STATE_ADDRESS,
  CYKURA_PROGRAM_ID,
  DELTA_FI_PROGRAM_ID,
  DELTA_FI_USER_ID,
  DEVNET_SERUM_DEX_PROGRAM,
  DRADEX_DEX_USER,
  DRADEX_LOGGER_PROGRAM_ID,
  DRADEX_MASTER_ID,
  DRADEX_PROGRAM_ID,
  GOOSE_FX_CONTROLLER_ID,
  GOOSE_FX_PROGRAM_ID,
  IDL_V4,
  INDEXED_ROUTE_MAP_URL,
  INVARIANT_PROGRAM_AUTHORITY_ID,
  INVARIANT_PROGRAM_ID,
  INVARIANT_STATE_ID,
  JUPITER_FEE_OWNER,
  JUPITER_PROGRAM,
  JUPITER_PROGRAM_ID,
  JUPITER_PROGRAM_ID_DEVNET,
  JUPITER_PROGRAM_ID_PRODUCTION,
  JUPITER_PROGRAM_ID_STAGING,
  JUPITER_PROGRAM_V4_ID,
  JUPITER_PROGRAM_V5_1_ID,
  JUPITER_PROGRAM_V5_ID,
  JUPITER_V5_ERRORS,
  LAMPORTS_PER_SIGNATURE,
  LIFINITY_PROGRAM_ID,
  LIFINITY_V2_PROGRAM_ID,
  MAINNET_SERUM_DEX_PROGRAM,
  MARCO_POLO_PROGRAM_AUTHORITY,
  MARCO_POLO_PROGRAM_ID,
  MARCO_POLO_STATE_ID,
  MARINADE_PROGRAM_ID,
  MARKETS_URL,
  MERCURIAL_SWAP_PROGRAM_ID,
  METEORA_PROGRAM_ID,
  METEORA_VAULT_PROGRAM_ID,
  OPENBOOK_PROGRAM_ID,
  ORCA_V1_PROGRAM_ID,
  ORCA_V2_PROGRAM_ID,
  Owner,
  PENGUIN_PROGRAM_ID,
  PHOENIX_PROGRAM_ID,
  RAYDIUM_AMM_V4_PROGRAM_ID,
  RAYDIUM_CLMM_PROGRAM_ID,
  SABER_ADD_DECIMALS_PROGRAM_ID,
  SAROS_PROGRAM_ID,
  SENCHA_PROGRAM_ID,
  STEPN_PROGRAM_ID,
  STEP_TOKEN_SWAP_PROGRAM_ID,
  SYMMETRY_PROGRAM_ID,
  SwapMode,
  TOKEN_LIST_URL,
  TransactionBuilder,
  WHIRLPOOL_PROGRAM_ID,
  WRAPPED_SOL_MINT,
  calculateTransactionDepositAndFee,
  calculateTransactionDepositAndFeeV2,
  createAndCloseWSOLAccount,
  createAssociatedTokenAccountIdempotentInstruction,
  createOpenOrdersInstruction,
  executeTransaction,
  extractInputTokenBalanceChange,
  extractOutputTokenBalanceChange,
  extractSOLChangeFromTransaction,
  extractTokenBalanceChangeFromTransaction,
  findAssociatedTokenAddress,
  findOrCreateAssociatedAccountByMint,
  getAtaInstructions,
  getEmptyInstruction,
  getOrCreateOpenOrdersAddress,
  getPlatformFeeAccounts,
  getRemoteRouteMap,
  getSignature,
  getTokenBalanceChangesFromTransactionResponse,
  getTransactionBlockhashAndFeePayer,
  getUnixTs,
  indexedRouteMapToRouteMap,
  routeMapToIndexedRouteMap,
  signTransaction,
  transactionSenderAndConfirmationWaiter,
  validateTransactionResponse,
  wait
};
//# sourceMappingURL=index.mjs.map