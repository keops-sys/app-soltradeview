{"version":3,"file":"math.cjs.development.js","sources":["../src/utils.ts","../src/math/curve.ts","../src/amm/stable.ts","../src/amm/fees.ts","../src/amm/tokenswap-stable.ts","../src/amm/tokenswap-constant-product.ts","../src/fraction.ts"],"sourcesContent":["import JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\n\nexport type SwapResult = {\n  priceImpact: Decimal;\n  fees: JSBI;\n  expectedOutputAmount: JSBI;\n};\n\nexport type SwapExactOutputResult = {\n  priceImpact: Decimal;\n  fees: JSBI;\n  expectedInputAmount: JSBI;\n};\n\nexport const ZERO = JSBI.BigInt(0);\nexport const ONE = JSBI.BigInt(1);\nexport const TWO = JSBI.BigInt(2);\n\nexport function abs(number: JSBI) {\n  if (JSBI.GE(number, ZERO)) {\n    return number;\n  }\n\n  return JSBI.unaryMinus(number);\n}\n\nexport function sumArray(numbers: JSBI[]) {\n  return numbers.reduce((prev, curr) => {\n    return JSBI.add(prev, curr);\n  }, ZERO);\n}\n\nexport function mulArray(numbers: JSBI[]) {\n  return numbers.reduce((prev, curr) => {\n    return JSBI.multiply(prev, curr);\n  }, ONE);\n}\n\nexport function ceilingDivision(dividend: JSBI, divisor: JSBI): [JSBI, JSBI] {\n  let quotient = JSBI.divide(dividend, divisor);\n  if (JSBI.equal(quotient, ZERO)) {\n    return [ZERO, ZERO];\n  }\n\n  let remainder = JSBI.remainder(dividend, divisor);\n  if (JSBI.greaterThan(remainder, ZERO)) {\n    quotient = JSBI.add(quotient, ONE);\n    divisor = JSBI.divide(dividend, quotient);\n    remainder = JSBI.remainder(dividend, quotient);\n    if (JSBI.greaterThan(remainder, ZERO)) {\n      divisor = JSBI.add(divisor, ONE);\n    }\n  }\n\n  return [quotient, divisor];\n}\n\nexport function toDecimal(input: JSBI, shift = 0) {\n  return new Decimal(input.toString()).div(new Decimal(10).pow(shift));\n}\n","import JSBI from 'jsbi';\nimport { mulArray, ONE, sumArray, TWO, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\n\nconst MAX_ITERATIONS = 32;\n\nexport class Curve {\n  constructor(private numberOfCurrencies: JSBI, private amplificationFactor: JSBI, private targetPrices: JSBI[]) {}\n\n  public exchange(\n    tokenAmounts: JSBI[],\n    inputIndex: number,\n    outputIndex: number,\n    amount: JSBI,\n    minusOne: boolean = true,\n  ) {\n    if (tokenAmounts.length !== JSBI.toNumber(this.numberOfCurrencies)) {\n      throw new Error('Number of currencies does not match');\n    }\n\n    let xp = this.xp(tokenAmounts);\n    let dx = JSBI.multiply(amount, this.targetPrices[inputIndex]);\n    let x = JSBI.add(xp[inputIndex], dx);\n    let y = this.computeY(tokenAmounts, inputIndex, outputIndex, x);\n    let dy = JSBI.subtract(xp[outputIndex], y);\n\n    // This is a special condition on Curve stable algo. For TokenSwap, they don't seem to apply this minus one.\n    if (minusOne) {\n      dy = JSBI.subtract(dy, ONE);\n    }\n\n    return JSBI.divide(dy, this.targetPrices[outputIndex]);\n  }\n\n  public computeBaseY(tokenAmounts: JSBI[], inputIndex: number, outputIndex: number, amount: JSBI) {\n    let d = this.computeD(tokenAmounts);\n    let xp = this.xp(tokenAmounts);\n    let nn = JSBI.exponentiate(this.numberOfCurrencies, this.numberOfCurrencies);\n    let sum = sumArray(xp);\n    let product = mulArray(xp);\n    let k = JSBI.subtract(\n      JSBI.add(JSBI.multiply(JSBI.multiply(this.amplificationFactor, nn), sum), d),\n      JSBI.multiply(JSBI.multiply(this.amplificationFactor, d), nn),\n    );\n    let b = JSBI.multiply(JSBI.multiply(JSBI.multiply(this.amplificationFactor, nn), nn), product);\n    let c = JSBI.multiply(JSBI.multiply(nn, product), k);\n    let numerator = JSBI.add(b, JSBI.divide(c, xp[inputIndex]));\n    let denominator = JSBI.add(b, JSBI.divide(c, xp[outputIndex]));\n\n    // Convert to number since JSBI doesn't support log10\n    let inputFactor = Math.log10(JSBI.toNumber(this.targetPrices[inputIndex]));\n    let outputFactor = Math.log10(JSBI.toNumber(this.targetPrices[outputIndex]));\n    let factor = Math.abs(outputFactor - inputFactor);\n\n    if (inputFactor >= outputFactor) {\n      return JSBI.BigInt(\n        new Decimal(numerator.toString())\n          .mul(new Decimal(amount.toString()))\n          .div(new Decimal(denominator.toString()))\n          .mul(Math.pow(10, factor))\n          .floor()\n          .toString(),\n      );\n    } else {\n      return JSBI.BigInt(\n        new Decimal(numerator.toString())\n          .mul(new Decimal(amount.toString()))\n          .div(new Decimal(denominator.toString()))\n          .div(Math.pow(10, factor))\n          .floor()\n          .toString(),\n      );\n    }\n  }\n\n  private computeY(tokenAmounts: JSBI[], inputIndex: number, outputIndex: number, newTotalAmount: JSBI) {\n    let d = this.computeD(tokenAmounts);\n    let xx = this.xp(tokenAmounts);\n    xx[inputIndex] = newTotalAmount;\n    xx.splice(outputIndex, 1);\n\n    let ann = JSBI.multiply(this.amplificationFactor, this.numberOfCurrencies);\n    let c = d;\n\n    for (const y of xx) {\n      c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(y, this.numberOfCurrencies));\n    }\n    c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(this.numberOfCurrencies, ann));\n\n    let b = JSBI.subtract(JSBI.add(sumArray(xx), JSBI.divide(d, ann)), d);\n    let yPrev = ZERO;\n    let y = d;\n\n    for (let i = 0; i < MAX_ITERATIONS; i++) {\n      yPrev = y;\n      y = JSBI.divide(JSBI.add(JSBI.exponentiate(y, TWO), c), JSBI.add(JSBI.multiply(TWO, y), b));\n\n      if (JSBI.greaterThan(y, yPrev)) {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(y, yPrev), ONE)) {\n          break;\n        }\n      } else {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(yPrev, y), ONE)) {\n          break;\n        }\n      }\n    }\n\n    return y;\n  }\n\n  private computeD(tokenAmounts: JSBI[]) {\n    let dPrev = ZERO;\n    let xp = this.xp(tokenAmounts);\n    let sum = sumArray(xp);\n    let d = sum;\n    let ann = JSBI.multiply(this.amplificationFactor, this.numberOfCurrencies);\n\n    for (let i = 0; i < MAX_ITERATIONS; i++) {\n      let dP = d;\n      for (const x of xp) {\n        dP = JSBI.divide(JSBI.multiply(dP, d), JSBI.multiply(this.numberOfCurrencies, x));\n      }\n      dPrev = d;\n      let numerator = JSBI.multiply(JSBI.add(JSBI.multiply(ann, sum), JSBI.multiply(dP, this.numberOfCurrencies)), d);\n      let denominator = JSBI.add(\n        JSBI.multiply(JSBI.subtract(ann, ONE), d),\n        JSBI.multiply(JSBI.add(this.numberOfCurrencies, ONE), dP),\n      );\n      d = JSBI.divide(numerator, denominator);\n\n      if (JSBI.greaterThan(d, dPrev)) {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(d, dPrev), ONE)) {\n          break;\n        }\n      } else {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(dPrev, d), ONE)) {\n          break;\n        }\n      }\n    }\n\n    return d;\n  }\n\n  private xp(tokenAmounts: JSBI[]) {\n    return tokenAmounts.map((tokenAmount, index) => {\n      return JSBI.multiply(tokenAmount, this.targetPrices[index]);\n    });\n  }\n\n  setAmplificationFactor(amplificationFactor: JSBI) {\n    this.amplificationFactor = amplificationFactor;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Curve } from '../math/curve';\nimport { SwapResult, toDecimal, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\n\nexport class Stable {\n  private curve: Curve;\n\n  constructor(numberOfCurrencies: JSBI, amp: JSBI, private targetPrices: JSBI[], private traderFee: Fraction) {\n    this.curve = new Curve(numberOfCurrencies, amp, this.targetPrices);\n  }\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): SwapResult {\n    let outputAmountWithoutFees = this.getOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n    let fees = this.getFees(outputAmountWithoutFees);\n    let expectedOutputAmount = JSBI.subtract(outputAmountWithoutFees, fees);\n\n    return {\n      priceImpact: this.getPriceImpact(tokenAmounts, inputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees: fees,\n      expectedOutputAmount: expectedOutputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(outputAmountWithoutFees: JSBI): JSBI {\n    return JSBI.equal(this.traderFee.numerator, ZERO)\n      ? ZERO\n      : JSBI.divide(JSBI.multiply(outputAmountWithoutFees, this.traderFee.numerator), this.traderFee.denominator);\n  }\n\n  private getOutputAmount(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    return this.curve.exchange(tokenAmounts, inputIndex, outputIndex, inputTradeAmount);\n  }\n\n  private getOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.computeBaseY(tokenAmounts, inputIndex, outputIndex, inputTradeAmount);\n  }\n\n  setAmp(amp: JSBI) {\n    this.curve.setAmplificationFactor(amp);\n  }\n\n  setTraderFee(traderFee: Fraction) {\n    this.traderFee = traderFee;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Fraction } from '../fraction';\nimport { ZERO, ONE } from '../utils';\n\n/** calculates fee amount given a fee fraction, returning one when fee is set but amount is zero */\nexport function calculateFeeAmount(amount: JSBI, fee: Fraction): JSBI {\n  if (JSBI.equal(fee.numerator, ZERO) || JSBI.equal(amount, ZERO)) {\n    return ZERO;\n  } else {\n    const feeAmount = JSBI.divide(JSBI.multiply(amount, fee.numerator), fee.denominator);\n    if (JSBI.equal(feeAmount, ZERO)) {\n      return ONE;\n    }\n    return feeAmount;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Curve } from '../math/curve';\nimport { ONE, SwapResult, toDecimal, ZERO, TWO } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '../fraction';\nimport { calculateFeeAmount } from './fees';\n\nexport class TokenSwapStable {\n  private curve: Curve;\n\n  constructor(amp: JSBI, private traderFee: Fraction, private ownerFee: Fraction) {\n    this.curve = new Curve(TWO, amp, [ONE, ONE]);\n  }\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, outputIndex: number): SwapResult {\n    let inputIndex = outputIndex === 0 ? 1 : 0;\n    let expectedOutputAmount = this.getExpectedOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n\n    return {\n      priceImpact: this.getPriceImpact(tokenAmounts, inputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees: this.getFees(inputTradeAmount),\n      expectedOutputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getExpectedOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(inputTradeAmount: JSBI): JSBI {\n    const tradingFee = calculateFeeAmount(inputTradeAmount, this.traderFee);\n    const ownerFee = calculateFeeAmount(inputTradeAmount, this.ownerFee);\n\n    return JSBI.add(tradingFee, ownerFee);\n  }\n\n  private getExpectedOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    const inputTradeAmountLessFees = this.getInputAmountLessFees(inputTradeAmount);\n\n    return this.getOutputAmount(tokenAmounts, inputTradeAmountLessFees, inputIndex, outputIndex);\n  }\n\n  private getExpectedOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    const inputTradeAmountLessFees = this.getInputAmountLessFees(inputTradeAmount);\n\n    return this.getOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountLessFees, inputIndex, outputIndex);\n  }\n\n  private getInputAmountLessFees(inputTradeAmount: JSBI): JSBI {\n    return JSBI.subtract(inputTradeAmount, this.getFees(inputTradeAmount));\n  }\n\n  private getOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmountLessFees: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.exchange(tokenAmounts, inputIndex, outputIndex, inputTradeAmountLessFees, false);\n  }\n\n  private getOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmountLessFees: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.computeBaseY(tokenAmounts, inputIndex, outputIndex, inputTradeAmountLessFees);\n  }\n}\n","import JSBI from 'jsbi';\nimport { SwapResult, toDecimal, ZERO, ceilingDivision, SwapExactOutputResult } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\nimport { calculateFeeAmount } from './fees';\n\nexport class TokenSwapConstantProduct {\n  constructor(private traderFee: Fraction, private ownerFee: Fraction, private feesOnInput: boolean = true) {}\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, outputIndex: number): SwapResult {\n    const inputIndex = outputIndex === 0 ? 1 : 0;\n    const newInputTradeAmount = this.feesOnInput ? this.getAmountLessFees(inputTradeAmount) : inputTradeAmount;\n\n    let expectedOutputAmount = this.getExpectedOutputAmount(tokenAmounts, newInputTradeAmount, inputIndex, outputIndex);\n\n    const fees = this.getFees(this.feesOnInput ? inputTradeAmount : expectedOutputAmount);\n\n    if (!this.feesOnInput) {\n      expectedOutputAmount = this.getAmountLessFees(expectedOutputAmount);\n    }\n\n    return {\n      priceImpact: this.getPriceImpact(\n        tokenAmounts,\n        newInputTradeAmount,\n        expectedOutputAmount,\n        inputIndex,\n        outputIndex,\n      ),\n      fees,\n      expectedOutputAmount,\n    };\n  }\n\n  public exchangeForExactOutput(\n    tokenAmounts: JSBI[],\n    outputTradeAmount: JSBI,\n    outputIndex: number,\n  ): SwapExactOutputResult {\n    const inputIndex = outputIndex === 0 ? 1 : 0;\n    const newOutputTradeAmount = this.feesOnInput ? outputTradeAmount : this.getAmountPlusFees(outputTradeAmount);\n\n    let expectedInputAmount = this.getInputAmount(tokenAmounts, newOutputTradeAmount, inputIndex, outputIndex);\n\n    const fees = this.getFees(this.feesOnInput ? expectedInputAmount : outputTradeAmount);\n\n    if (this.feesOnInput) {\n      expectedInputAmount = this.getAmountPlusFees(expectedInputAmount);\n    }\n\n    return {\n      priceImpact: this.getPriceImpactExactOutput(\n        tokenAmounts,\n        expectedInputAmount,\n        newOutputTradeAmount,\n        inputIndex,\n        outputIndex,\n      ),\n      fees,\n      expectedInputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getExpectedOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getPriceImpactExactOutput(\n    tokenAmounts: JSBI[],\n    expectedInputTradeAmountJSBI: JSBI,\n    outputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(outputAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageInputAmount = toDecimal(\n      this.getExpectedInputAmountWithNoSlippage(tokenAmounts, outputAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedInputAmount = toDecimal(expectedInputTradeAmountJSBI);\n    const impact = expectedInputAmount.sub(noSlippageInputAmount).div(noSlippageInputAmount);\n\n    return impact;\n  }\n\n  private getFees(tradeAmount: JSBI): JSBI {\n    const tradingFee = calculateFeeAmount(tradeAmount, this.traderFee);\n    const ownerFee = calculateFeeAmount(tradeAmount, this.ownerFee);\n\n    return JSBI.add(tradingFee, ownerFee);\n  }\n\n  private getExpectedOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.getOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n  }\n\n  private getExpectedOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    if (JSBI.equal(tokenAmounts[inputIndex], ZERO)) {\n      return tokenAmounts[outputIndex];\n    }\n\n    const expectedOutputAmountWithNoSlippage = JSBI.divide(\n      JSBI.multiply(inputTradeAmount, tokenAmounts[outputIndex]),\n      tokenAmounts[inputIndex],\n    );\n\n    if (this.feesOnInput) {\n      return expectedOutputAmountWithNoSlippage;\n    } else {\n      return this.getAmountLessFees(expectedOutputAmountWithNoSlippage);\n    }\n  }\n\n  private getExpectedInputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    outputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    if (JSBI.equal(tokenAmounts[outputIndex], ZERO)) {\n      return tokenAmounts[inputIndex];\n    }\n\n    const expectedInputAmountWithNoSlippage = JSBI.divide(\n      JSBI.multiply(outputTradeAmount, tokenAmounts[inputIndex]),\n      tokenAmounts[outputIndex],\n    );\n\n    if (this.feesOnInput) {\n      return this.getAmountPlusFees(expectedInputAmountWithNoSlippage);\n    } else {\n      return expectedInputAmountWithNoSlippage;\n    }\n  }\n\n  private getAmountLessFees(tradeAmount: JSBI): JSBI {\n    return JSBI.subtract(tradeAmount, this.getFees(tradeAmount));\n  }\n\n  private getAmountPlusFees(tradeAmount: JSBI): JSBI {\n    return JSBI.add(tradeAmount, this.getFees(tradeAmount));\n  }\n\n  private getOutputAmount(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    const [poolInputAmount, poolOutputAmount] = [tokenAmounts[inputIndex], tokenAmounts[outputIndex]];\n\n    const invariant = this.getInvariant(tokenAmounts);\n\n    const [newPoolOutputAmount] = ceilingDivision(invariant, JSBI.add(poolInputAmount, inputTradeAmount));\n\n    return JSBI.subtract(poolOutputAmount, newPoolOutputAmount);\n  }\n\n  private getInputAmount(tokenAmounts: JSBI[], outputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    const [poolInputAmount, poolOutputAmount] = [tokenAmounts[inputIndex], tokenAmounts[outputIndex]];\n\n    const invariant = this.getInvariant(tokenAmounts);\n\n    if (JSBI.greaterThanOrEqual(outputTradeAmount, poolOutputAmount)) {\n      throw new Error('Insufficient liquidity to provide outputTradeAmount');\n    }\n    const [newPoolInputAmount] = ceilingDivision(invariant, JSBI.subtract(poolOutputAmount, outputTradeAmount));\n    return JSBI.subtract(newPoolInputAmount, poolInputAmount);\n  }\n\n  getInvariant(tokenAmounts: JSBI[]) {\n    return JSBI.multiply(tokenAmounts[0], tokenAmounts[1]);\n  }\n}\n","import JSBI from 'jsbi';\n\nexport class Fraction {\n  constructor(public numerator: JSBI, public denominator: JSBI) {}\n}\n\nexport const ZERO_FRACTION = new Fraction(JSBI.BigInt(0), JSBI.BigInt(1));\n"],"names":["ZERO","JSBI","BigInt","ONE","TWO","abs","number","GE","unaryMinus","sumArray","numbers","reduce","prev","curr","add","mulArray","multiply","ceilingDivision","dividend","divisor","quotient","divide","equal","remainder","greaterThan","toDecimal","input","shift","Decimal","toString","div","pow","MAX_ITERATIONS","Curve","numberOfCurrencies","amplificationFactor","targetPrices","_proto","prototype","exchange","tokenAmounts","inputIndex","outputIndex","amount","minusOne","length","toNumber","Error","xp","dx","x","y","computeY","dy","subtract","computeBaseY","d","computeD","nn","exponentiate","sum","product","k","b","c","numerator","denominator","inputFactor","Math","log10","outputFactor","factor","mul","floor","newTotalAmount","xx","splice","ann","_iterator","_createForOfIteratorHelperLoose","_step","done","value","yPrev","i","lessThanOrEqual","dPrev","dP","_iterator2","_step2","_this","map","tokenAmount","index","setAmplificationFactor","Stable","amp","traderFee","curve","inputTradeAmount","outputAmountWithoutFees","getOutputAmount","fees","getFees","expectedOutputAmount","priceImpact","getPriceImpact","inputTradeAmountJSBI","expectedOutputAmountJSBI","noSlippageOutputAmount","getOutputAmountWithNoSlippage","impact","sub","setAmp","setTraderFee","calculateFeeAmount","fee","feeAmount","TokenSwapStable","ownerFee","getExpectedOutputAmount","getExpectedOutputAmountWithNoSlippage","tradingFee","inputTradeAmountLessFees","getInputAmountLessFees","TokenSwapConstantProduct","feesOnInput","newInputTradeAmount","getAmountLessFees","exchangeForExactOutput","outputTradeAmount","newOutputTradeAmount","getAmountPlusFees","expectedInputAmount","getInputAmount","getPriceImpactExactOutput","expectedInputTradeAmountJSBI","outputAmountJSBI","noSlippageInputAmount","getExpectedInputAmountWithNoSlippage","tradeAmount","expectedOutputAmountWithNoSlippage","expectedInputAmountWithNoSlippage","_ref","poolInputAmount","poolOutputAmount","invariant","getInvariant","_ceilingDivision","newPoolOutputAmount","_ref2","greaterThanOrEqual","_ceilingDivision2","newPoolInputAmount","Fraction","ZERO_FRACTION"],"mappings":"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"}